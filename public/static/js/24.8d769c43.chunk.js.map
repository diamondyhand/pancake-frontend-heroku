{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","role","color","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","variant","primaryToken","secondaryToken","flexDirection","split","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","onChange","onSelectMax","value","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceBigNumber","BigNumber","gt","lt","toLocaleString","toFixed","ROUND_DOWN","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","useToast","toastSuccess","toastError","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","fullBalanceNumber","handleChange","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","title","disabled","isFinite","eq","a","console","error","alignSelf","WithdrawModal","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","info","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","lpPrice","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","useModal","onPresentDeposit","onPresentWithdraw","Balance","getBalanceNumber","times","unit","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","cakePrice","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","toNumber","useApproveFarm","lpContract","onApprove","approve","address","ethers","constants","MaxUint256","tx","wait","receipt","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","mt","UnlockButton","ApyButton","apr","displayApr","ApyCalculatorModal","linkLabel","tokenPrice","linkHref","isFarm","onPresentApyModal","event","stopPropagation","ml","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","card","background","isPromotedFarm","radii","Divider","cardBorder","ExpandingWrapper","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isCommunity","display","CardActionsContainer","getBscScanLink","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","collapseAnimation","css","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Image","getDisplayApr","cakeRewardsApr","lpRewardsApr","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","localStorageKey","setViewMode","sortOption","setSortOption","isArchived","isInactive","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","latinise","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","PageHeader","exact","activeClassName","p","Page","checked","Select","options","option","marginLeft","SearchInput","target","sort","b","renderContent","src","alt"],"mappings":"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","file":"static/js/24.8d769c43.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading } from '@pancakeswap/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { Token } from 'config/constants/types'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  token: Token\n  quoteToken: Token\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\nimport Spacer from './Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BigNumber } from 'bignumber.js'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n    const balanceBigNumber = new BigNumber(balance)\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n      return balanceBigNumber.toLocaleString()\n    }\n    return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import { useCallback } from 'react'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useUnstakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      await unstakeFarm(masterChefContract, pid, amount)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import { useCallback } from 'react'\nimport { stakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\n      console.info(txHash)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakeFarms\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/hooks'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\nimport useStakeFarms from '../../hooks/useStakeFarms'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        )}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { harvestFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useHarvestFarm = (farmPid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    await harvestFarm(masterChefContract, farmPid)\n  }, [farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestFarm\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport useToast from 'hooks/useToast'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n        {earningsBusd > 0 && (\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n        )}\n      </Flex>\n      <Button\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onReward()\n            toastSuccess(\n              `${t('Harvested')}!`,\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n            )\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            console.error(e)\n          } finally {\n            setPendingTx(false)\n          }\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n        }}\n      >\n        {t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const masterChefContract = useMasterchef()\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await lpContract.approve(masterChefContract.address, ethers.constants.MaxUint256)\n      const receipt = await tx.wait()\n      return receipt.status\n    } catch (e) {\n      return false\n    }\n  }, [lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveFarm\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\nimport useApproveFarm from '../../hooks/useApproveFarm'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const allowance = new BigNumber(allowanceAsString)\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n  const earnings = new BigNumber(earningsAsString)\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {farm.lpSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, displayApr, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      tokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      displayApr={displayApr}\n      linkHref={addLiquidityUrl}\n      isFarm\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap/uikit'\nimport { Farm } from 'state/types'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  lpRewardsApr?: number\n  liquidity?: BigNumber\n}\n\nconst AccentGradient = keyframes`  \n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\n  background-size: 400% 400%;\n  animation: ${AccentGradient} 2s linear infinite;\n  border-radius: 32px;\n  position: absolute;\n  top: -1px;\n  right: -1px;\n  bottom: -3px;\n  left: -1px;\n  z-index: -1;\n`\n\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  displayApr: string\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('CAKE + Fees')\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = getAddress(farm.lpAddresses)\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\n\n  return (\n    <FCard isPromotedFarm={isPromotedFarm}>\n      {isPromotedFarm && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={farm.isCommunity}\n        token={farm.token}\n        quoteToken={farm.quoteToken}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{t('APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apr ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  addLiquidityUrl={addLiquidityUrl}\n                  cakePrice={cakePrice}\n                  apr={farm.apr}\n                  displayApr={displayApr}\n                />\n                {displayApr}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={getBscScanLink(lpAddress, 'address')}\n          infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\n          totalValueFormatted={totalValueFormatted}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton\n              lpLabel={lpLabel}\n              cakePrice={cakePrice}\n              apr={originalValue}\n              displayApr={value}\n              addLiquidityUrl={addLiquidityUrl}\n            />\n          )}\n        </>\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Token } from 'config/constants/types'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\n      </TokenWrapper>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <>\n      {t('The multiplier represents the amount of CAKE rewards each farm gets.')}\n      <br />\n      <br />\n      {t('For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.')}\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n","import React, { useState } from 'react'\nimport { Button, Skeleton, Text } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\n\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const { toastSuccess, toastError } = useToast()\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Harvested')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml=\"4px\"\n        >\n          {t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { BigNumber } from 'bignumber.js'\nimport UnlockButton from 'components/UnlockButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser, useLpTokenPrice } from 'state/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport useStakeFarms from '../../../hooks/useStakeFarms'\nimport useApproveFarm from '../../../hooks/useApproveFarm'\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  lpSymbol,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = getAddress(lpAddresses)\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance()}</Earned>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake').toUpperCase()}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBscScanLink } from 'utils'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = getAddress(farm.lpAddresses)\n  const bsc = getBscScanLink(lpAddress, 'address')\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\nimport { ViewMode } from '../types'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\n  if (cakeRewardsApr && lpRewardsApr) {\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  usePollFarmsData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const { cakeRewardsApr, lpRewardsApr } = isActive\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\n\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n\n  const farmsStakedMemoized = useMemo(() => {\n    let farmsStaked = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [farmsStakedMemoized, observerIsSet])\n\n  const rowData = farmsStakedMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                key={farm.pid}\n                farm={farm}\n                displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n                cakePrice={cakePrice}\n                account={account}\n                removed={false}\n              />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                key={farm.pid}\n                farm={farm}\n                displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n                cakePrice={cakePrice}\n                account={account}\n                removed\n              />\n            ))}\n          </Route>\n          <Route exact path={`${path}/archived`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                key={farm.pid}\n                farm={farm}\n                displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n                cakePrice={cakePrice}\n                account={account}\n                removed\n              />\n            ))}\n          </Route>\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <PageHeader>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n          {t('Farms')}\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          {t('Stake LP tokens to earn.')}\n        </Heading>\n        <NavLink exact activeClassName=\"active\" to=\"/farms/auction\" id=\"lottery-pot-banner\">\n          <Button p=\"0\" variant=\"text\">\n            <Text color=\"primary\" bold fontSize=\"16px\" mr=\"4px\">\n              {t('Community Auctions')}\n            </Text>\n            <ArrowForwardIcon color=\"primary\" />\n          </Button>\n        </NavLink>\n      </PageHeader>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        <div ref={loadMoreRef} />\n        <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}