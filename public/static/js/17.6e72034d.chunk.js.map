{"version":3,"sources":["../node_modules/lodash/max.js","views/Home/hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","hooks/useIntersectionObserver.ts","views/Home/components/EarnAPRCard.tsx","views/Home/components/EarnAssetCard.tsx","views/Home/components/PredictionPromotionCard.tsx","views/Home/components/LotteryPromotionCard.tsx","views/Home/components/LotteryBanner.tsx","views/Home/hooks/useFetchLotteryForPromos.ts","views/Home/Home.tsx","hooks/useTokenBalance.ts"],"names":["baseExtremum","require","baseGt","identity","module","exports","array","length","undefined","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","CardValue","value","decimals","fontSize","lineHeight","prefix","bold","color","useCountUp","start","end","duration","separator","countUp","update","updateValue","useRef","current","style","CardBusdValue","props","Block","styled","div","CakeHarvestBalance","farmsWithBalance","t","useTranslation","earningsSum","reduce","accum","earning","earningNumber","eq","DEFAULT_TOKEN_DECIMAL","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","gt","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","toastError","useToast","masterChefContract","useMasterchef","balancesWithValue","filter","balanceType","harvestAllFarms","useCallback","farmWithBalance","harvestFarm","scale","mb","src","alt","width","height","id","disabled","onClick","count","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","fetch","response","json","responseData","console","error","fetchData","useGetStats","useIntersectionObserver","observerRef","observerIsSet","setObserverIsSet","isIntersecting","setIsIntersecting","IntersectionObserver","entry","rootMargin","threshold","observe","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPRCard","isFetchingFarmData","setIsFetchingFarmData","farmsLP","useFarms","cakePrice","dispatch","useAppDispatch","fetchFarmsPublicDataAsync","nonArchivedFarms","nonArchivedFarm","fetchFarmData","highestApr","useMemo","aprs","multiplier","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","times","getFarmApr","poolWeight","lpAddresses","ChainId","MAINNET","cakeRewardsApr","lpRewardsApr","maxApr","max","toLocaleString","maximumFractionDigits","aprText","split","earnUpTo","InFarms","exact","activeClassName","to","animation","variant","ref","justifyContent","mt","activeNonCakePools","pools","pool","isFinished","earningToken","symbol","includes","latestPools","orderBy","slice","assets","join","EarnAssetCard","earn","InPools","StyledPredictionCard","sm","md","PredictionLive","Text","PredictionOver","PredictionWon","Balance","StyledSkeleton","Skeleton","PredictionBNBSoFar","PredictionTryNow","Flex","PredictionPromotionCard","slowRefresh","loadData","setLoadData","bnbBusdPrice","usePriceBnbBusd","bnbWon","setBnbWon","bnbWonInUsd","setBnbWonInUsd","getTotalWon","totalWon","fetchMarketData","bnbWonInUsdText","toString","amount","over","bnbSoFar","href","px","PrizeText","LotteryPromotionCard","currentLotteryPrize","prizeInBusd","prizeTotal","prizeTotalText","isNaN","inPrizes","NowLive","Wrapper","Inner","Container","LeftWrapper","RightWrapper","PrizeFlex","Over","LotteryBanner","mr","useFetchLotteryForPromos","lotteryId","setLotteryId","setCurrentLotteryPrize","fetchCurrentLotteryIdAndMaxBuy","currentLotteryId","fetchCurrentID","fetchLottery","amountCollectedInCake","fetchCurrentLotteryPrize","Hero","Cards","BaseLayout","CTACards","Home","Page","as","FarmStakingCard","FetchStatus","setTotalSupply","cakeContract","getCakeContract","supply","fetchTotalSupply","tokenAddress","BIG_ZERO","setBalance","contract","getBep20Contract","balanceOf","res","fetchBalance","useGetBnbBalance","useLastUpdated","lastUpdated","setLastUpdated","simpleRpcProvider","getBalance","walletBalance","refresh","NOT_FETCHED","SUCCESS","FAILED","fetchStatus","balanceState","setBalanceState","prev"],"mappings":"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","file":"static/js/17.6e72034d.chunk.js","sourcesContent":["var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from 'hooks/useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap/uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardBusdValue\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { FarmWithBalance } from 'views/Home/hooks/useFarmsWithBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\ninterface CakeHarvestBalanceProps {\n  farmsWithBalance: FarmWithBalance[]\n}\n\nconst CakeHarvestBalance: React.FC<CakeHarvestBalanceProps> = ({ farmsWithBalance }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const earningsSum = farmsWithBalance.reduce((accum, earning) => {\n    const earningNumber = new BigNumber(earning.balance)\n    if (earningNumber.eq(0)) {\n      return accum\n    }\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\n  }, 0)\n  const cakePriceBusd = usePriceCakeBusd()\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      {cakePriceBusd.gt(0) && <CardBusdValue value={earningsBusd} />}\n    </Block>\n  )\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst CakeWalletBalance = () => {\n  const { t } = useTranslation()\n  const { balance: cakeBalance } = useTokenBalance(getCakeAddress())\n  const cakePriceBusd = usePriceCakeBusd()\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <>\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\n      {cakePriceBusd.gt(0) ? <CardBusdValue value={busdBalance} /> : <br />}\n    </>\n  )\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap/uikit'\nimport { harvestFarm } from 'utils/calls'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport useFarmsWithBalance from 'views/Home/hooks/useFarmsWithBalance'\nimport { useMasterchef } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/cake-bg.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const farmsWithBalance = useFarmsWithBalance()\n  const masterChefContract = useMasterchef()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.gt(0))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    // eslint-disable-next-line no-restricted-syntax\n    for (const farmWithBalance of balancesWithValue) {\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        await harvestFarm(masterChefContract, farmWithBalance.pid)\n      } catch (error) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    }\n    setPendingTx(false)\n  }, [balancesWithValue, masterChefContract, toastError, t])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{t('CAKE to Harvest')}:</Label>\n          <CakeHarvestBalance farmsWithBalance={balancesWithValue} />\n        </Block>\n        <Block>\n          <Label>{t('CAKE in Wallet')}:</Label>\n          <CakeWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? t('Collecting CAKE')\n                : t('Harvest all (%count%)', {\n                    count: balancesWithValue.length,\n                  })}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const { t } = useTranslation()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Cake Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{t('Total CAKE Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{t('Total CAKE Burned')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{t('New CAKE/block')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={19} />\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetStats } from 'hooks/api'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const { t } = useTranslation()\n  const data = useGetStats()\n  // const tvl = data ? data.tvl.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\n  const tvl = '1000';\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading scale=\"lg\" mb=\"24px\">\n          {t('Total Value Locked (TVL)')}\n        </Heading>\n        {data ? (\n          <>\n            <Heading scale=\"xl\">{`$${tvl}`}</Heading>\n            <Text color=\"textSubtle\">{t('Across all LPs and Syrup Pools')}</Text>\n          </>\n        ) : (\n          <Skeleton height={66} />\n        )}\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import { useEffect, useState } from 'react'\n\n/* eslint-disable camelcase */\nexport interface DeBankTvlResponse {\n  id: string\n  chain: string\n  name: string\n  site_url: string\n  logo_url: string\n  has_supported_portfolio: boolean\n  tvl: number\n}\n\nexport const useGetStats = () => {\n  const [data, setData] = useState<DeBankTvlResponse | null>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://openapi.debank.com/v1/protocol?id=bsc_pancakeswap')\n        const responseData: DeBankTvlResponse = await response.json()\n\n        setData(responseData)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n","import { useEffect, useRef, useState } from 'react'\n\nconst useIntersectionObserver = () => {\n  const observerRef = useRef<HTMLDivElement>(null)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const [isIntersecting, setIsIntersecting] = useState(false)\n\n  useEffect(() => {\n    const checkObserverIsIntersecting = ([entry]: IntersectionObserverEntry[]) => {\n      setIsIntersecting(entry.isIntersecting)\n    }\n\n    if (!observerIsSet) {\n      const intersectionObserver = new IntersectionObserver(checkObserverIsIntersecting, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      intersectionObserver.observe(observerRef.current)\n      setObserverIsSet(true)\n    }\n  }, [observerIsSet])\n\n  return { observerRef, isIntersecting }\n}\n\nexport default useIntersectionObserver\n","import React, { useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport max from 'lodash/max'\nimport { NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { useFarms, usePriceCakeBusd } from 'state/hooks'\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms'\nimport { getFarmApr } from 'utils/apr'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPRCard = () => {\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true)\n  const { t } = useTranslation()\n  const { data: farmsLP } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n\n  // Fetch farm data once to get the max APR\n  useEffect(() => {\n    const fetchFarmData = async () => {\n      try {\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map((nonArchivedFarm) => nonArchivedFarm.pid)))\n      } finally {\n        setIsFetchingFarmData(false)\n      }\n    }\n\n    if (isIntersecting) {\n      fetchFarmData()\n    }\n  }, [dispatch, setIsFetchingFarmData, isIntersecting])\n\n  const highestApr = useMemo(() => {\n    if (cakePrice.gt(0)) {\n      const aprs = farmsLP.map((farm) => {\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\n        if (farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.busdPrice) {\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n          const { cakeRewardsApr, lpRewardsApr } = getFarmApr(\n            new BigNumber(farm.poolWeight),\n            cakePrice,\n            totalLiquidity,\n            farm.lpAddresses[ChainId.MAINNET],\n          )\n          return cakeRewardsApr + lpRewardsApr\n        }\n        return null\n      })\n\n      const maxApr = max(aprs)\n      return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\n    }\n    return null\n  }, [cakePrice, farmsLP])\n\n  const aprText = highestApr || '-'\n  const earnAprText = t('Earn up to %highestApr% APR in Farms', { highestApr: aprText })\n  const [earnUpTo, InFarms] = earnAprText.split(aprText)\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            {earnUpTo}\n          </Heading>\n          <CardMidContent color=\"#7645d9\">\n            {highestApr && !isFetchingFarmData ? (\n              `${highestApr}%`\n            ) : (\n              <>\n                <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n                <div ref={observerRef} />\n              </>\n            )}\n          </CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"contrast\" scale=\"lg\">\n              {InFarms}\n            </Heading>\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPRCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport orderBy from 'lodash/orderBy'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { NavLink } from 'react-router-dom'\nimport pools from 'config/constants/pools'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background: linear-gradient(#53dee9, #7645d9);\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\n\nconst activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.earningToken.symbol.includes('CAKE'))\nconst latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\n// Always include CAKE\nconst assets = ['CAKE', ...latestPools.map((pool) => pool.earningToken.symbol)].join(', ')\n\nconst EarnAssetCard = () => {\n  const { t } = useTranslation()\n  const assetText = t('Earn %assets% in Pools', { assets })\n  const [earn, InPools] = assetText.split(assets)\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/syrup\" id=\"pool-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            {earn}\n          </Heading>\n          <CardMidContent color=\"invertedContrast\">{assets}</CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"contrast\" scale=\"lg\">\n              {InPools}\n            </Heading>\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAssetCard\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, ArrowForwardIcon, Link, Button, Text, Skeleton, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getTotalWon } from 'state/predictions/helpers'\nimport { usePriceBnbBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport Balance from '../../../components/Balance'\n\nconst StyledPredictionCard = styled(Card)`\n  background-image: url('/images/prediction_promotion.png');\n  background-repeat: no-repeat;\n  background-position: bottom right;\n  background-size: 50%;\n  min-height: 376px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    background-size: 45%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    background-size: 50%;\n  }\n`\n\nconst PredictionLive = styled(Text)`\n  font-size: 28px;\n  line-height: 1.1;\n  font-weight: 600;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 40px;\n  }\n`\n\nconst PredictionOver = styled(Text)`\n  font-size: 36px;\n  line-height: 1.1;\n  font-weight: 600;\n  max-width: 380px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 50px;\n  }\n`\n\nconst PredictionWon = styled(Balance)`\n  font-size: 36px;\n  line-height: 1.1;\n  font-weight: 600;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 50px;\n  }\n`\n\nconst StyledSkeleton = styled(Skeleton)`\n  height: 40px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    height: 55px;\n  }\n`\n\nconst PredictionBNBSoFar = styled(Text)`\n  font-size: 22px;\n  line-height: 1.1;\n  font-weight: 600;\n  max-width: 160px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    font-size: 24px;\n    max-width: 320px;\n  }\n`\n\nconst PredictionTryNow = styled(Flex)`\n  align-items: center;\n  max-width: 120px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    max-width: none;\n  }\n`\n\nconst PredictionPromotionCard = () => {\n  const { t } = useTranslation()\n  const { slowRefresh } = useRefresh()\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n  const [loadData, setLoadData] = useState(false)\n  const bnbBusdPrice = usePriceBnbBusd()\n  const [bnbWon, setBnbWon] = useState(0)\n  const [bnbWonInUsd, setBnbWonInUsd] = useState(0)\n\n  // Fetch farm data once to get the max APR\n  useEffect(() => {\n    if (isIntersecting) {\n      setLoadData(true)\n    }\n  }, [isIntersecting])\n\n  useEffect(() => {\n    const fetchMarketData = async () => {\n      const totalWon = await getTotalWon()\n      setBnbWon(totalWon)\n    }\n\n    if (loadData) {\n      fetchMarketData()\n    }\n  }, [slowRefresh, loadData])\n\n  useEffect(() => {\n    if (bnbBusdPrice.gt(0) && bnbWon > 0) {\n      setBnbWonInUsd(bnbBusdPrice.times(bnbWon).toNumber())\n    }\n  }, [bnbBusdPrice, bnbWon])\n\n  const bnbWonInUsdText = bnbWonInUsd ? bnbWonInUsd.toString() : '-'\n  const wonBNBText = t('Over %amount% in BNB won so far', { amount: bnbWonInUsdText })\n  const [over, bnbSoFar] = wonBNBText.split(bnbWonInUsdText)\n\n  return (\n    <StyledPredictionCard>\n      <CardBody>\n        <PredictionLive mb=\"24px\">{t('Predictions Now Live')}</PredictionLive>\n        <PredictionOver bold color=\"#7645d9\">\n          {over}\n        </PredictionOver>\n        {bnbWonInUsd ? (\n          <PredictionWon mb=\"24px\" color=\"#7645d9\" bold prefix=\"$\" decimals={0} value={bnbWonInUsd} />\n        ) : (\n          <>\n            <StyledSkeleton animation=\"pulse\" variant=\"rect\" mb=\"24px\" width={180} />\n            <div ref={observerRef} />\n          </>\n        )}\n        <PredictionBNBSoFar bold mb=\"24px\">\n          {bnbSoFar}\n        </PredictionBNBSoFar>\n        <Text color=\"textSubtle\" mb=\"24px\">\n          *{t('Beta Version')}\n        </Text>\n        <Link href=\"https://pancakeswap.finance/prediction\" id=\"homepage-prediction-cta\">\n          <Button px={['14px', null, null, null, '20px']}>\n            <PredictionTryNow>\n              <Text color=\"white\" bold fontSize=\"16px\">\n                {t('Try Now')}\n              </Text>\n              <ArrowForwardIcon color=\"white\" />\n            </PredictionTryNow>\n          </Button>\n        </Link>\n      </CardBody>\n    </StyledPredictionCard>\n  )\n}\n\nexport default PredictionPromotionCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton, Text } from '@pancakeswap/uikit'\nimport { NavLink } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\n\nconst PrizeText = styled(Text)`\n  word-wrap: break-word;\n`\n\nconst LotteryPromotionCard: React.FC<{ currentLotteryPrize: string }> = ({ currentLotteryPrize }) => {\n  const { t } = useTranslation()\n  const cakePriceBusd = usePriceCakeBusd()\n  const prizeInBusd = cakePriceBusd.times(currentLotteryPrize)\n  const prizeTotal = getBalanceNumber(prizeInBusd)\n\n  const prizeTotalText = prizeInBusd.isNaN() ? prizeTotal.toString() : '-'\n  const prizeText = t('Over %amount% in Prizes!', { amount: prizeTotalText })\n  const [over, inPrizes] = prizeText.split(prizeTotalText)\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/lottery\" id=\"lottery-pot-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            {t('Lottery')} V2\n          </Heading>\n          <PrizeText color=\"#7645d9\" fontSize=\"40px\" bold lineHeight=\"1.1\">\n            {over}\n          </PrizeText>\n          {prizeInBusd.isNaN() ? (\n            <>\n              <Skeleton height={60} width={210} />\n            </>\n          ) : (\n            <Balance fontSize=\"40px\" color=\"#7645d9\" bold lineHeight=\"1.1\" prefix=\"$\" decimals={0} value={prizeTotal} />\n          )}\n          <Flex justifyContent=\"space-between\">\n            <PrizeText color=\"contrast\" fontSize=\"28px\" bold lineHeight=\"1.1\">\n              {inPrizes}\n            </PrizeText>\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default LotteryPromotionCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Button, ArrowForwardIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Container from 'components/Layout/Container'\nimport { NavLink } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nconst NowLive = styled(Text)`\n  background: -webkit-linear-gradient(#ffd800, #eb8c00);\n  font-size: 24px;\n  font-weight: 600;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n`\n\nconst Wrapper = styled.div`\n  background-image: linear-gradient(#7645d9, #452a7a);\n  max-height: max-content;\n  overflow: hidden;\n  ${({ theme }) => theme.mediaQueries.md} {\n    max-height: 256px;\n  }\n`\n\nconst Inner = styled(Container)`\n  display: flex;\n  flex-direction: column-reverse;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n  }\n`\n\nconst LeftWrapper = styled(Flex)`\n  flex-direction: column;\n  flex: 1;\n  padding-bottom: 40px;\n  padding-top: 24px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 40px;\n  }\n`\n\nconst RightWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex: 0.5;\n\n  & img {\n    width: 80%;\n    margin-top: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & img {\n      margin-top: 0;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0.8;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & img {\n      margin-top: -25px;\n    }\n  }\n`\n\nconst PrizeFlex = styled(Flex)`\n  flex-direction: row;\n  flex-wrap: wrap;\n  margin-bottom: 8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    max-width: 640px;\n  }\n`\n\nconst Over = styled(Text)`\n  :empty {\n    margin-right: 0;\n  }\n`\n\nconst LotteryBanner: React.FC<{ currentLotteryPrize: string }> = ({ currentLotteryPrize }) => {\n  const { t } = useTranslation()\n  const cakePriceBusd = usePriceCakeBusd()\n  const prizeInBusd = cakePriceBusd.times(currentLotteryPrize)\n  const prizeTotal = getBalanceNumber(prizeInBusd)\n\n  const prizeTotalText = prizeInBusd.isNaN() ? prizeTotal.toString() : '-'\n  const prizeText = t('Over %amount% in Prizes!', { amount: prizeTotalText })\n  const [over, inPrizes] = prizeText.split(prizeTotalText)\n\n  return (\n    <Wrapper>\n      <Inner>\n        <LeftWrapper>\n          <NowLive>{t('Lottery Now Live')}</NowLive>\n          <PrizeFlex>\n            <Over fontSize=\"40px\" color=\"#ffffff\" bold mr=\"8px\">\n              {over}\n            </Over>\n            <>\n              {prizeInBusd.isNaN() ? (\n                <>\n                  <Skeleton height={40} width={120} mb=\"10px\" mt=\"10px\" mr=\"8px\" />\n                </>\n              ) : (\n                <Balance fontSize=\"40px\" color=\"#ffffff\" bold prefix=\"$\" mr=\"8px\" decimals={0} value={prizeTotal} />\n              )}\n            </>\n            <Text fontSize=\"40px\" color=\"#ffffff\" bold>\n              {inPrizes}\n            </Text>\n          </PrizeFlex>\n          <NavLink exact activeClassName=\"active\" to=\"/lottery\" id=\"lottery-pot-banner\">\n            <Button>\n              <Text color=\"white\" bold fontSize=\"16px\" mr=\"4px\">\n                {t('Play Now')}\n              </Text>\n              <ArrowForwardIcon color=\"white\" />\n            </Button>\n          </NavLink>\n        </LeftWrapper>\n        <RightWrapper>\n          <img src=\"/images/lottery/tombola.png\" alt=\"lottery bunny\" />\n        </RightWrapper>\n      </Inner>\n    </Wrapper>\n  )\n}\n\nexport default LotteryBanner\n","import { useState, useEffect } from 'react'\nimport { fetchCurrentLotteryIdAndMaxBuy, fetchLottery } from 'state/lottery/helpers'\nimport useRefresh from 'hooks/useRefresh'\n\nconst useFetchLotteryForPromos = () => {\n  const { slowRefresh } = useRefresh()\n  const [lotteryId, setLotteryId] = useState<string>(null)\n  const [currentLotteryPrize, setCurrentLotteryPrize] = useState<string>(null)\n\n  useEffect(() => {\n    // get current lottery ID\n    const fetchCurrentID = async () => {\n      const { currentLotteryId } = await fetchCurrentLotteryIdAndMaxBuy()\n      setLotteryId(currentLotteryId)\n    }\n\n    fetchCurrentID()\n  }, [setLotteryId])\n\n  useEffect(() => {\n    // get public data for current lottery\n    const fetchCurrentLotteryPrize = async () => {\n      const { amountCollectedInCake } = await fetchLottery(lotteryId)\n      setCurrentLotteryPrize(amountCollectedInCake)\n    }\n\n    if (lotteryId) {\n      fetchCurrentLotteryPrize()\n    }\n  }, [lotteryId, slowRefresh, setCurrentLotteryPrize])\n\n  return { currentLotteryPrize }\n}\n\nexport default useFetchLotteryForPromos\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/Layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\nimport PredictionPromotionCard from 'views/Home/components/PredictionPromotionCard'\nimport LotteryPromotionCard from 'views/Home/components/LotteryPromotionCard'\nimport LotteryBanner from 'views/Home/components/LotteryBanner'\nimport useFetchLotteryForPromos from 'views/Home/hooks/useFetchLotteryForPromos'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/pan-bg-mobile.svg');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 24px;\n  grid-gap: 24px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 32px;\n    grid-gap: 32px;\n\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 24px;\n  grid-gap: 24px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 32px;\n    grid-gap: 32px;\n\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const { t } = useTranslation()\n  const { currentLotteryPrize } = useFetchLotteryForPromos()\n\n  return (\n    <>\n      <LotteryBanner currentLotteryPrize={currentLotteryPrize} />\n      <Page>\n        <Hero>\n          <Heading as=\"h1\" scale=\"xl\" mb=\"24px\" color=\"secondary\">\n            {t('PancakeSwap')}\n          </Heading>\n          <Text>{t('The #1 AMM and yield farm on Binance Smart Chain.')}</Text>\n        </Hero>\n        <div>\n          <Cards>\n            <FarmStakingCard />\n            <PredictionPromotionCard />\n          </Cards>\n          <CTACards>\n            <EarnAPRCard />\n            <EarnAssetCard />\n            <LotteryPromotionCard currentLotteryPrize={currentLotteryPrize} />\n          </CTACards>\n          <Cards>\n            <CakeStats />\n            <TotalValueLockedCard />\n          </Cards>\n        </div>\n      </Page>\n    </>\n  )\n}\n\nexport default Home\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { simpleRpcProvider } from 'utils/providers'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.balanceOf(account)\n        setBalanceState({ balance: new BigNumber(res.toString()), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.totalSupply()\n      setTotalSupply(new BigNumber(supply.toString()))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      const res = await contract.balanceOf('0x000000000000000000000000000000000000dEaD')\n      setBalance(new BigNumber(res.toString()))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await simpleRpcProvider.getBalance(account)\n      setBalance(new BigNumber(walletBalance.toString()))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n"],"sourceRoot":""}