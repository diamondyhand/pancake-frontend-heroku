{"version":3,"sources":["views/Predictions/components/History/Header.tsx","views/Predictions/hooks/useGetLatestOraclePrice.ts","views/Predictions/hooks/usePollOraclePrice.ts","views/Predictions/hooks/usePollPredictions.ts","views/Predictions/components/Container.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","views/Predictions/components/History/helpers.ts","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","views/Predictions/helpers.ts","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/components/RoundResult/RoundResultHistory.tsx","views/Predictions/hooks/useIsRefundable.ts","views/Predictions/components/History/BetResult.tsx","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/History/RoundsTab.tsx","views/Predictions/components/History/PnlTab/PnlChartStyles.tsx","views/Predictions/components/History/PnlTab/PnlChart.tsx","views/Predictions/components/History/PnlTab/SummaryRow.tsx","views/Predictions/components/History/PnlTab/PnlTab.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/Card.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CollectWinningsOverlay.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","components/BlockProgress.tsx","views/Predictions/components/RoundCard/CalculatingCard.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","views/Predictions/components/RoundCard/OpenRoundCard.tsx","hooks/useGetBlockCountdown.ts","views/Predictions/hooks/useRoundCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/Positions.tsx","views/Predictions/Mobile.tsx","views/Predictions/Desktop.tsx","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/components/ChartDisclaimer.tsx","views/Predictions/index.tsx","hooks/useTokenBalance.ts"],"names":["HistoryTabs","useGetLatestOraclePrice","useState","ethers","BigNumber","from","price","setPrice","useLastUpdated","lastUpdated","refresh","setLastUpdated","useEffect","a","contract","getChainlinkOracleContract","latestAnswer","response","fetchPrice","usePollOraclePrice","seconds","dispatch","useAppDispatch","timer","setInterval","clearInterval","setLastOraclePrice","toJSON","usePollPredictions","useRef","account","useWeb3React","currentEpoch","useGetCurrentEpoch","earliestEpoch","useGetEarliestEpoch","status","useGetPredictionsStatus","current","PredictionStatus","LIVE","liveAndCurrent","fetchRounds","fetchMarketData","epochRange","range","fetchLedgerData","epochs","fetchClaimableStatuses","POLL_TIME_IN_SECONDS","Container","styled","div","theme","colors","gradients","violetAlt","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","mediaQueries","md","Popup","secondary","CollectWinningsPopup","isOpen","setIsOpen","t","useTranslation","ref","predictionStatus","isHistoryPaneOpen","useIsHistoryPaneOpen","isCancelled","getBetHistory","user","toLowerCase","claimed","bets","winnerBets","filter","bet","position","round","length","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","width","style","flex","mr","onClick","setHistoryPaneState","variant","color","SwiperContext","createContext","undefined","SwiperProvider","children","swiper","setSwiper","Provider","value","destroySwiper","destroy","tradingViewListener","Promise","resolve","Object","defineProperty","window","configurable","set","this","tv","initializeTradingView","TradingViewObj","localeCode","widget","autosize","height","symbol","interval","timezone","isDark","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","currentLanguage","useTheme","code","then","overflow","className","id","CardWrapper","BunnyDecoration","Notification","title","src","alt","mb","ErrorNotification","as","PauseNotification","formatUsd","usd","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","getMultiplier","total","amount","getPayout","rewardRate","bullAmount","bearAmount","totalAmount","multiplier","BetPosition","BULL","getNetPayout","payout","Modal","ModalContainer","CollectRoundWinningsModal","betAmount","epoch","onDismiss","onSuccess","isPendingTx","setIsPendingTx","useToast","toastSuccess","toastError","predictionsContract","usePredictionsContract","bnbBusdPrice","usePriceBnbBusd","payoutAsFloat","parseFloat","betAmountAsFloat","handleClick","claim","tx","wait","receipt","transactionHash","href","getBscScanLink","minWidth","mt","p","mx","alignItems","justifyContent","textAlign","fontSize","times","toFormat","isLoading","endIcon","spin","CollectWinningsButton","hasClaimed","props","useModal","onPresentCollectWinningsModal","disabled","ReclaimPositionButton","handleReclaim","formatUsdv2","formatBigNumberToFixed","formatBnbv2","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","getTimePeriods","hours","minutes","minutesSeconds","getMultiplierv2","FixedNumber","eq","rewardAmountFixed","multiplierAmountFixed","divUnsafe","getNetPayoutv2","ledger","rewardAmount","amountFixed","formatBigNumber","mulUnsafe","getPayoutv2","subUnsafe","getPriceDifference","lockPrice","sub","StyledTag","Flex","bg","Tag","startIcon","icon","borderRadius","py","px","cursor","textTransform","ml","PositionTag","betPosition","isUpPosition","getPrizePoolAmount","Row","PrizePoolRow","bold","PayoutRow","positionLabel","formattedMultiplier","lineHeight","LockPriceRow","Background","Box","isNext","isLive","hasEntered","success","BEAR","failure","cardBorder","StyledRoundResultBox","card","background","RoundResultBox","getPrizePoolAmountHistory","PrizePoolHistoryRow","LockPriceHistoryRow","RoundResult","hasFailed","closePrice","HOUSE","gt","getBetPosition","isPositionUp","priceDifference","my","failed","useIsRefundable","isRefundable","setIsRefundable","getPredictionsContract","claimable","refundable","fetchRefundableStatus","StyledBetResult","textDisabled","Divider","hr","BetResult","result","canClaim","useGetRewardRate","useTooltip","fee","placement","targetRef","tooltip","tooltipVisible","isWinner","Result","WIN","returned","getHeaderColor","LOSE","CANCELED","handleSuccess","markBetHistoryAsCollected","betId","getHeaderText","getHeaderIcon","claimedHash","getResultColor","toNumber","StyledBetDetails","dropdown","BetDetails","bullMultiplier","bearMultiplier","RoundResultHistory","lockBlock","external","endBlock","StyledBet","attrs","YourResult","HistoricalBet","roundResult","getRoundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","role","scale","Filter","label","StyledHeader","bubblegum","ButtonMenuContainer","getClaimParam","historyFilter","HistoryFilter","COLLECTED","UNCOLLECTED","ALL","Header","activeTab","setActiveTab","useGetHistoryFilter","isFetchingHistory","useGetIsFetchingHistory","handleChange","newFilter","fetchHistory","setHistoryFilter","switchTab","tabIndex","size","activeIndex","onItemClick","ROUNDS","checked","onChange","RoundsTab","hasBetHistory","orderBy","map","DrawAnimation","OffsetAnimation","offset","SVG","svg","DefaultSlice","circle","LostSlice","WonSlice","Info","CIRCUMFERENCE","PnlChart","lost","won","percentageWon","toFixed","paintLost","paintWon","viewBox","r","cx","cy","small","summaryTypeColors","entered","summaryTypeSigns","SummaryRow","type","summary","rounds","roundsInPercents","typeTranslationKey","charAt","toUpperCase","slice","displayAmount","flexDirection","toLocaleLowerCase","backgroundDisabled","initialPnlSummary","bestRound","PnlTab","store","getState","predictions","reduce","getPnlSummary","netResultAmount","netResultIsPositive","avgPositionEntered","avgBnbWonPerRound","avgBnbWonIsPositive","hasBestRound","pb","pl","roundId","StyledHistory","BetWrapper","SpinnerWrapper","History","useGetHistoryByAccount","results","getUnclaimedWinningBets","activeTabComponent","PNL","UnlockButton","RoundMultiplierDownArrow","isActive","fill","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","values","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","StyledEnteredTag","EnteredTag","whiteSpace","ArrowWrapper","Content","EnteredTagWrapper","getTextColor","fallback","isDisabled","MultiplierArrow","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","Card","UIKitCard","getTextColorByStatus","StyledCardHeader","cardHeader","warning","getBackgroundColor","Round","CardHeader","isBottom","CollectWinningsOverlay","useGetIsClaimable","CanceledRoundCard","useGetTotalIntervalBlocks","estimatedEndBlock","startBlock","blockNumber","StyledExpiredRoundCard","ExpiredRoundCard","hasEnteredUp","hasEnteredDown","initialBlock","useBlock","useGetBetByEpoch","formattedPayout","toUnsafeFloat","hasRoundFailed","oracleCalled","getHasRoundFailed","BlockProgress","rawProgress","currentBlock","progress","primaryStep","CalculatingCard","GradientBorder","GradientCard","LiveRoundCard","useGetLastOraclePrice","isBull","priceColor","estimatedEndBlockPlusPadding","BLOCK_PADDING","priceAsNumber","useCountUp","start","end","duration","decimals","countUp","update","updateRef","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","Error","getComponents","front","back","useSwiper","swiperContext","useContext","FlexRow","gasPrice","parseUnits","dust","percentShortcuts","getValueAsEthersBn","valueAsFloat","Number","isNaN","SetPositionCard","togglePosition","onBack","setValue","isTxPending","setIsTxPending","errorMessage","setErrorMessage","percent","setPercent","bnbBalance","useGetBnbBalance","balance","minBetAmount","useGetMinBetAmount","bnbBalanceAsBn","useMemo","maxBalance","balanceDisplay","valueAsBn","showFieldWarning","handlePercentChange","sliderPercent","maxValueAsFn","hundredAsFn","sliderPercentAsFn","balancePercentage","formatFixedNumber","minBetAmountBalance","lte","key","lt","getButtonProps","handleEnterPosition","betMethod","inputAmount","data","token","onMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","enable","attachEvents","onUserInput","input","inputAsBn","inputAsFn","percentageAsFloat","isWarning","inputProps","name","min","max","onValueChanged","valueLabel","step","percentShortcut","OpenRoundCard","isSettingPosition","state","setState","useGetIntervalBlocks","isBufferPhase","positionDisplay","estimatedLockBlock","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","useBlockCountdown","secondsRemaining","setSecondsRemaining","simpleRpcProvider","getBlockNumber","BSC_BLOCK_TIME","prevSecondsRemaining","startCountdown","useRoundCountdown","intervalsToAdd","currentRoundBlockNum","useGetCurrentRoundBlockNumber","blocksToAdd","SoonRoundCard","countdown","RoundCard","formattedBullMultiplier","isZero","formattedbearMultiplier","Token","lg","Title","Text","Price","Interval","Label","dir","PricePairLabel","display","TimerLabel","unit","pr","StyledPrevNextNav","Icon","PrevNextNav","useGetSortedRounds","slidePrev","currentEpochIndex","findIndex","slideTo","slideNext","HistoryButton","SetCol","HelpButtonWrapper","TimerLabelWrapper","HistoryButtonWrapper","Menu","target","rel","useOnNextRound","previousEpoch","usePreviousValue","SwiperCore","use","Keyboard","Mousewheel","PageView","StyledSwiper","Positions","initialIndex","Math","floor","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","freeModeMomentumRatio","freeModeMomentumVelocityRatio","resizeObserver","ExpandChartButton","Button","text","SplitWrapper","ChartPane","HistoryPane","StyledDesktop","PositionPane","Gutter","textSubtle","Desktop","splitWrapperRef","chartRef","gutterRef","isChartPaneOpen","useIsChartPaneOpen","handleDrag","debounce","getBoundingClientRect","setChartPaneState","split","Split","dragInterval","snapOffset","onDrag","rowGutters","track","element","newChartPaneState","transition","gridTemplateRows","delay","ERROR","PAUSED","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","getActiveIndex","index","MenuWrapper","ChartWrapper","Chart","StyledMobile","xl","View","isVisible","Mobile","view","HISTORY","CHART","POSITIONS","getView","GradientModalHeader","ModalHeader","RiskDisclaimer","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","maxWidth","maxHeight","overflowY","htmlFor","marginBottom","ChartDisclaimer","Predictions","isXl","useMatchBreakpoints","usePersistState","localStorageKey","hasAcceptedRisk","setHasAcceptedRisk","hasAcceptedChart","setHasAcceptedChart","useInitialBlock","isDesktop","onPresentRiskDisclaimer","onPresentChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","initializePredictions","INITIAL","PageLoader","FetchStatus","useTotalSupply","slowRefresh","useRefresh","totalSupply","setTotalSupply","cakeContract","getCakeContract","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","BIG_ZERO","setBalance","getBep20Contract","balanceOf","res","fetchBalance","getBalance","walletBalance","useTokenBalance","NOT_FETCHED","SUCCESS","FAILED","fetchStatus","balanceState","setBalanceState","fastRefresh","console","error","prev"],"mappings":"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","file":"static/js/22.c8f44eab.chunk.js","sourcesContent":["import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowForwardIcon,\n  Box,\n  Button,\n  Radio,\n  Flex,\n  Heading,\n  Text,\n  ButtonMenu,\n  ButtonMenuItem,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { HistoryFilter } from 'state/types'\nimport { setHistoryFilter, setHistoryPaneState, fetchHistory } from 'state/predictions'\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\n\nconst Filter = styled.label`\n  align-items: center;\n  cursor: pointer;\n  display: inline-flex;\n  margin-right: 16px;\n`\n\nconst StyledHeader = styled(Box)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  flex: none;\n  padding: 16px;\n`\n\nconst ButtonMenuContainer = styled.div`\n  width: 100%;\n  & > div {\n    width: 100%;\n  }\n\n  & button {\n    width: 100%;\n  }\n`\n\nconst getClaimParam = (historyFilter: HistoryFilter) => {\n  switch (historyFilter) {\n    case HistoryFilter.COLLECTED:\n      return true\n    case HistoryFilter.UNCOLLECTED:\n      return false\n    case HistoryFilter.ALL:\n    default:\n      return undefined\n  }\n}\n\ninterface HeaderProps {\n  activeTab: HistoryTabs\n  setActiveTab: (value: HistoryTabs) => void\n}\n\nexport enum HistoryTabs {\n  ROUNDS,\n  PNL,\n}\n\nconst Header: React.FC<HeaderProps> = ({ activeTab, setActiveTab }) => {\n  const historyFilter = useGetHistoryFilter()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(false))\n  }\n\n  const handleChange = (newFilter: HistoryFilter) => async () => {\n    if (newFilter !== historyFilter) {\n      await dispatch(fetchHistory({ account, claimed: getClaimParam(newFilter) }))\n      dispatch(setHistoryFilter(newFilter))\n    }\n  }\n\n  const switchTab = async (tabIndex: number) => {\n    setActiveTab(tabIndex)\n    await handleChange(HistoryFilter.ALL)()\n  }\n\n  return (\n    <StyledHeader>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n        <Heading as=\"h3\" size=\"md\">\n          {t('History')}\n        </Heading>\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\n          {t('Close')}\n        </Button>\n      </Flex>\n      <ButtonMenuContainer>\n        <ButtonMenu activeIndex={activeTab} scale=\"sm\" variant=\"subtle\" onItemClick={switchTab}>\n          <ButtonMenuItem>{t('Rounds')}</ButtonMenuItem>\n          <ButtonMenuItem>{t('PNL')}</ButtonMenuItem>\n        </ButtonMenu>\n      </ButtonMenuContainer>\n      {activeTab === HistoryTabs.ROUNDS && (\n        <>\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n            {t('Filter')}\n          </Text>\n          <Flex alignItems=\"center\">\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.ALL}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.ALL)}\n              />\n              <Text ml=\"4px\">{t('All')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.COLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.COLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Collected')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.UNCOLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.UNCOLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Uncollected')}</Text>\n            </Filter>\n          </Flex>\n        </>\n      )}\n    </StyledHeader>\n  )\n}\n\nexport default Header\n","import { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport { getChainlinkOracleContract } from 'utils/contractHelpers'\n\nconst useGetLatestOraclePrice = () => {\n  const [price, setPrice] = useState(ethers.BigNumber.from(0))\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\n\n  useEffect(() => {\n    const fetchPrice = async () => {\n      const contract = getChainlinkOracleContract()\n      const response = await contract.latestAnswer()\n      setPrice(response)\n    }\n\n    fetchPrice()\n  }, [lastUpdated, setPrice])\n\n  return { price, lastUpdated, refresh }\n}\n\nexport default useGetLatestOraclePrice\n","import { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { setLastOraclePrice } from 'state/predictions'\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\n\nconst usePollOraclePrice = (seconds = 30) => {\n  const { price, refresh } = useGetLatestOraclePrice()\n  const dispatch = useAppDispatch()\n\n  // Poll for the oracle price\n  useEffect(() => {\n    refresh()\n    const timer = setInterval(() => {\n      refresh()\n    }, seconds * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [seconds, refresh])\n\n  // If the price changed update global state\n  useEffect(() => {\n    dispatch(setLastOraclePrice(price.toJSON()))\n  }, [price, dispatch])\n}\n\nexport default usePollOraclePrice\n","import { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetEarliestEpoch, useGetPredictionsStatus } from 'state/hooks'\nimport { fetchClaimableStatuses, fetchLedgerData, fetchMarketData, fetchRounds } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport { range } from 'lodash'\n\nconst POLL_TIME_IN_SECONDS = 10\n\nconst usePollPredictions = () => {\n  const timer = useRef<NodeJS.Timeout>(null)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const earliestEpoch = useGetEarliestEpoch()\n  const status = useGetPredictionsStatus()\n\n  useEffect(() => {\n    // Clear old timer\n    if (timer.current) {\n      clearInterval(timer.current)\n    }\n\n    if (status === PredictionStatus.LIVE) {\n      timer.current = setInterval(async () => {\n        const liveAndCurrent = [currentEpoch, currentEpoch - 1]\n\n        dispatch(fetchRounds(liveAndCurrent))\n        dispatch(fetchMarketData())\n\n        if (account) {\n          const epochRange = range(earliestEpoch, currentEpoch + 1)\n          dispatch(fetchLedgerData({ account, epochs: epochRange }))\n          dispatch(fetchClaimableStatuses({ account, epochs: epochRange }))\n        }\n      }, POLL_TIME_IN_SECONDS * 1000)\n    }\n\n    return () => {\n      if (timer.current) {\n        clearInterval(timer.current)\n      }\n    }\n  }, [timer, account, status, currentEpoch, earliestEpoch, dispatch])\n}\n\nexport default usePollPredictions\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  background: ${({ theme }) => theme.colors.gradients.violetAlt};\n  height: calc(100vh - 64px);\n  min-height: calc(100vh - 64px);\n  overflow: hidden;\n  position: relative;\n`\n\nexport default Container\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled, { css, keyframes } from 'styled-components'\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { CSSTransition } from 'react-transition-group'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBetHistory } from 'state/predictions/helpers'\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/hooks'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\n\n/**\n * @see https://github.com/animate-css/animate.css/tree/main/source\n */\nconst bounceInKeyframe = keyframes`\n  from,\n  60%,\n  75%,\n  90%,\n  to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  from {\n    opacity: 0;\n    transform: translate3d(0, 3000px, 0) scaleY(5);\n  }\n\n  60% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  75% {\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\n  }\n\n  90% {\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\n  }\n\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n`\n\nconst bounceOutKeyframe = keyframes`\n  20% {\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\n  }\n\n  40%,\n  45% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  to {\n    opacity: 0;\n    transform: translate3d(0, 2000px, 0) scaleY(3);\n  }\n`\n\nconst bounceInAnimation = css`\n  animation: ${bounceInKeyframe} 1s;\n`\n\nconst bounceOutAnimation = css`\n  animation: ${bounceOutKeyframe} 1s;\n`\n\nconst Wrapper = styled.div`\n  align-items: center;\n  bottom: 72px;\n  color: #ffffff;\n  display: flex;\n  justify-content: center;\n  left: 0;\n  padding-left: 16px;\n  padding-right: 16px;\n  position: absolute;\n  width: 100%;\n  z-index: 50;\n\n  &.popup-enter-active {\n    ${bounceInAnimation}\n  }\n\n  &.popup-enter-done {\n    bottom: 72px;\n  }\n\n  &.popup-exit-done {\n    bottom: -2000px;\n  }\n\n  &.popup-exit-active {\n    ${bounceOutAnimation}\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    bottom: 16px;\n    justify-content: flex-end;\n\n    &.popup-enter-done {\n      bottom: 16px;\n    }\n  }\n`\n\nconst Popup = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.secondary};\n  border-radius: 32px;\n  color: #ffffff;\n  display: flex;\n  max-width: 320px;\n  padding: 16px 8px;\n`\n\nconst CollectWinningsPopup = () => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { t } = useTranslation()\n  const ref = useRef(null)\n  const timer = useRef(null)\n  const { account } = useWeb3React()\n  const predictionStatus = useGetPredictionsStatus()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  const handleClick = () => {\n    setIsOpen(false)\n    clearInterval(timer.current)\n  }\n\n  // Check user's history for unclaimed winners\n  useEffect(() => {\n    let isCancelled = false\n    if (account) {\n      timer.current = setInterval(async () => {\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\n\n        if (!isCancelled) {\n          // Filter out bets that were not winners\n          const winnerBets = bets.filter((bet) => {\n            return bet.position === bet.round.position\n          })\n\n          if (!isHistoryPaneOpen) {\n            setIsOpen(winnerBets.length > 0)\n          }\n        }\n      }, 30000)\n    }\n\n    return () => {\n      clearInterval(timer.current)\n      isCancelled = true\n    }\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\n\n  // Any time the history pane is open make sure the popup closes\n  useEffect(() => {\n    if (isHistoryPaneOpen) {\n      setIsOpen(false)\n    }\n  }, [isHistoryPaneOpen, setIsOpen])\n\n  return (\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\n      <Wrapper ref={ref}>\n        <Popup>\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\n            {t('Collect Winnings')}\n          </Button>\n          <IconButton variant=\"text\" onClick={handleClick}>\n            <CloseIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n        </Popup>\n      </Wrapper>\n    </CSSTransition>\n  )\n}\n\nexport default CollectWinningsPopup\n","import React, { createContext, Dispatch, useState } from 'react'\nimport SwiperCore from 'swiper'\n\ninterface Context {\n  swiper: SwiperCore\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\n  destroySwiper: () => void\n}\n\nexport const SwiperContext = createContext<Context>(undefined)\n\nconst SwiperProvider = ({ children }) => {\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\n\n  const destroySwiper = () => {\n    if (swiper) {\n      swiper.destroy()\n      setSwiper(null)\n    }\n  }\n\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\n}\n\nexport default SwiperProvider\n","import React, { useEffect } from 'react'\nimport { Box } from '@pancakeswap/uikit'\nimport { DefaultTheme, useTheme } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\n/**\n * When the script tag is injected the TradingView object is not immediately\n * available on the window. So we listen for when it gets set\n */\nconst tradingViewListener = async () =>\n  new Promise<void>((resolve) =>\n    Object.defineProperty(window, 'TradingView', {\n      configurable: true,\n      set(value) {\n        this.tv = value\n        resolve(value)\n      },\n    }),\n  )\n\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme, localeCode: string) => {\n  /* eslint-disable new-cap */\n  /* eslint-disable no-new */\n  // @ts-ignore\n  new TradingViewObj.widget({\n    autosize: true,\n    height: '100%',\n    symbol: 'BINANCE:BNBUSDT',\n    interval: '5',\n    timezone: 'Etc/UTC',\n    theme: theme.isDark ? 'dark' : 'light',\n    style: '1',\n    locale: localeCode,\n    toolbar_bg: '#f1f3f6',\n    enable_publishing: false,\n    allow_symbol_change: true,\n    container_id: 'tradingview_b239c',\n  })\n}\n\nconst TradingView = () => {\n  const { currentLanguage } = useTranslation()\n  const theme = useTheme()\n\n  useEffect(() => {\n    // @ts-ignore\n    if (window.TradingView) {\n      // @ts-ignore\n      initializeTradingView(window.TradingView, theme, currentLanguage.code)\n    } else {\n      tradingViewListener().then((tv) => {\n        initializeTradingView(tv, theme, currentLanguage.code)\n      })\n    }\n  }, [theme, currentLanguage])\n\n  return (\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\n      <div id=\"tradingview_b239c\" />\n    </Box>\n  )\n}\n\nexport default TradingView\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading } from '@pancakeswap/uikit'\n\ninterface NotificationProps {\n  title: string\n}\n\n// const BunnyDecoration = styled.div`\n//   position: absolute;\n//   top: -130px; // line up bunny at the top of the modal\n//   left: 0px;\n//   text-align: center;\n//   width: 100%;\n// `\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  height: 100%;\n  justify-content: center;\n`\n\nconst CardWrapper = styled.div`\n  position: relative;\n  width: 320px;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -130px;\n  left: 0px;\n  text-align: center;\n  width: 100%;\n  z-index: 5;\n`\n\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\n  return (\n    <Wrapper>\n      <CardWrapper>\n        <BunnyDecoration>\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\n        </BunnyDecoration>\n        <Card>\n          <CardBody>\n            <Heading mb=\"24px\">{title}</Heading>\n            {children}\n          </CardBody>\n        </Card>\n      </CardWrapper>\n    </Wrapper>\n  )\n}\n\nexport default Notification\n","import React from 'react'\nimport { Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst ErrorNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n  return (\n    <Notification title={t('Error')}>\n      <Text as=\"p\" mb=\"24px\">\n        {t('This page can’t be displayed right now due to an error. Please check back soon.')}\n      </Text>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default ErrorNotification\n","import React from 'react'\nimport { Box, Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst PauseNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <Notification title={t('Markets Paused')}>\n      <Box mb=\"24px\">\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\n        <Text as=\"p\">{t('All open positions have been canceled.')}</Text>\n        <Text as=\"p\">\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\n        </Text>\n      </Box>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default PauseNotification\n","import { Bet, BetPosition } from 'state/types'\nimport { formatNumber } from 'utils/formatBalance'\n\nexport const formatUsd = (usd: number) => {\n  return `$${formatNumber(usd || 0, 3, 3)}`\n}\n\nexport const formatBnb = (bnb: number) => {\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\n}\n\nexport const getMultiplier = (total: number, amount: number) => {\n  if (total === 0 || amount === 0) {\n    return 0\n  }\n\n  return total / amount\n}\n\n/**\n * Calculates the total payout given a bet\n */\nexport const getPayout = (bet: Bet, rewardRate = 1) => {\n  if (!bet || !bet.round) {\n    return 0\n  }\n\n  const { bullAmount, bearAmount, totalAmount } = bet.round\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n  return bet.amount * multiplier * rewardRate\n}\n\nexport const getNetPayout = (bet: Bet, rewardRate = 1): number => {\n  if (!bet || !bet.round) {\n    return 0\n  }\n\n  const payout = getPayout(bet, rewardRate)\n  return payout - bet.amount\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  ModalContainer,\n  ModalBody,\n  ModalTitle,\n  ModalHeader,\n  InjectedModalProps,\n  Button,\n  AutoRenewIcon,\n  TrophyGoldIcon,\n  Text,\n  Flex,\n  Heading,\n  Box,\n  LinkExternal,\n  ModalCloseButton,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBscScanLink } from 'utils'\nimport { useAppDispatch } from 'state'\nimport { usePriceBnbBusd } from 'state/hooks'\nimport { fetchClaimableStatuses } from 'state/predictions'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { usePredictionsContract } from 'hooks/useContract'\n\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\n  payout: string\n  betAmount: string\n  epoch: number\n  onSuccess?: () => Promise<void>\n}\n\nconst Modal = styled(ModalContainer)`\n  overflow: visible;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -116px; // line up bunny at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`\n\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({\n  payout,\n  betAmount,\n  epoch,\n  onDismiss,\n  onSuccess,\n}) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const predictionsContract = usePredictionsContract()\n  const bnbBusdPrice = usePriceBnbBusd()\n  const dispatch = useAppDispatch()\n\n  // Convert payout to number for compatibility\n  const payoutAsFloat = parseFloat(payout)\n  const betAmountAsFloat = parseFloat(betAmount)\n\n  const handleClick = async () => {\n    try {\n      const tx = await predictionsContract.claim(epoch)\n      setIsPendingTx(true)\n      const receipt = await tx.wait()\n\n      if (onSuccess) {\n        await onSuccess()\n      }\n\n      await dispatch(fetchClaimableStatuses({ account, epochs: [epoch] }))\n      onDismiss()\n      setIsPendingTx(false)\n      toastSuccess(\n        t('Winnings collected!'),\n        <Box>\n          <Text as=\"p\" mb=\"8px\">\n            {t('Your prizes have been sent to your wallet')}\n          </Text>\n          {receipt.transactionHash && (\n            <LinkExternal href={getBscScanLink(receipt.transactionHash, 'transaction')}>\n              {t('View on BscScan')}\n            </LinkExternal>\n          )}\n        </Box>,\n      )\n    } catch {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    } finally {\n      setIsPendingTx(false)\n    }\n  }\n\n  return (\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\n      <BunnyDecoration>\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\n      </BunnyDecoration>\n      <ModalHeader>\n        <ModalTitle>\n          <Heading>{t('Collect Winnings')}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </ModalHeader>\n      <ModalBody p=\"24px\">\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text>{t('Your position')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text>{`${betAmount} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${bnbBusdPrice.times(betAmountAsFloat).toFormat(2)}`}\n            </Text>\n          </Box>\n        </Flex>\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"24px\">\n          <Text>{t('Your winnings')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text>{`${payout} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${bnbBusdPrice.times(payoutAsFloat).toFormat(2)}`}\n            </Text>\n          </Box>\n        </Flex>\n        <Button\n          width=\"100%\"\n          mb=\"8px\"\n          onClick={handleClick}\n          isLoading={isPendingTx}\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        >\n          {t('Confirm')}\n        </Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default CollectRoundWinningsModal\n","import React from 'react'\nimport { Button, ButtonProps, useModal } from '@pancakeswap/uikit'\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\n\ninterface CollectWinningsButtonProps extends ButtonProps {\n  payout: string\n  betAmount: string\n  epoch: number\n  hasClaimed: boolean\n  onSuccess?: () => Promise<void>\n}\n\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({\n  payout,\n  betAmount,\n  epoch,\n  hasClaimed,\n  onSuccess,\n  children,\n  ...props\n}) => {\n  const [onPresentCollectWinningsModal] = useModal(\n    <CollectRoundWinningsModal payout={payout} betAmount={betAmount} epoch={epoch} onSuccess={onSuccess} />,\n    false,\n  )\n\n  return (\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\n      {children}\n    </Button>\n  )\n}\n\nexport default CollectWinningsButton\n","import React, { ReactNode, useState } from 'react'\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\n\ninterface ReclaimPositionButtonProps extends ButtonProps {\n  epoch: number\n  onSuccess?: () => Promise<void>\n  children?: ReactNode\n}\n\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const predictionsContract = usePredictionsContract()\n  const { toastSuccess, toastError } = useToast()\n\n  const handleReclaim = async () => {\n    const tx = await predictionsContract.claim(epoch)\n    setIsPendingTx(true)\n\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      if (onSuccess) {\n        await onSuccess()\n      }\n      setIsPendingTx(false)\n      toastSuccess(t('Position reclaimed!'))\n    } else {\n      setIsPendingTx(false)\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    }\n  }\n\n  return (\n    <Button\n      onClick={handleReclaim}\n      isLoading={isPendingTx}\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\n      {...props}\n    >\n      {children || t('Reclaim Position')}\n    </Button>\n  )\n}\n\nexport default ReclaimPositionButton\n","import { ethers } from 'ethers'\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\nimport { formatBigNumber, formatBigNumberToFixed } from 'utils/formatBalance'\nimport getTimePeriods from 'utils/getTimePeriods'\n\nexport const formatUsdv2 = (usd: ethers.BigNumber) => {\n  return `$${formatBigNumberToFixed(usd, 3, 8)}`\n}\n\nexport const formatBnbv2 = (bnb: ethers.BigNumber) => {\n  const value = bnb || ethers.BigNumber.from(0)\n  return formatBigNumberToFixed(value, 4)\n}\n\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\n\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\n\n  if (hours > 0) {\n    return `${padTime(hours)}:${minutesSeconds}`\n  }\n\n  return minutesSeconds\n}\n\nexport const getHasRoundFailed = (round: NodeRound, blockNumber: number) => {\n  if (!round.endBlock) {\n    return false\n  }\n\n  return blockNumber > round.endBlock && round.oracleCalled === false\n}\n\nexport const getMultiplierv2 = (total: ethers.BigNumber, amount: ethers.BigNumber) => {\n  if (!total) {\n    return ethers.FixedNumber.from(0)\n  }\n\n  if (total.eq(0) || amount.eq(0)) {\n    return ethers.FixedNumber.from(0)\n  }\n\n  const rewardAmountFixed = ethers.FixedNumber.from(total)\n  const multiplierAmountFixed = ethers.FixedNumber.from(amount)\n\n  return rewardAmountFixed.divUnsafe(multiplierAmountFixed)\n}\n\nexport const getPayoutv2 = (ledger: NodeLedger, round: NodeRound) => {\n  if (!ledger || !round) {\n    return ethers.FixedNumber.from(0)\n  }\n\n  const { bullAmount, bearAmount, rewardAmount } = round\n  const { amount, position } = ledger\n\n  const amountFixed = ethers.FixedNumber.from(formatBigNumber(amount))\n  const multiplier = getMultiplierv2(rewardAmount, position === BetPosition.BULL ? bullAmount : bearAmount)\n  return amountFixed.mulUnsafe(multiplier)\n}\n\nexport const getNetPayoutv2 = (ledger: NodeLedger, round: NodeRound) => {\n  if (!ledger || !round) {\n    return ethers.FixedNumber.from(0)\n  }\n\n  const payout = getPayoutv2(ledger, round)\n  const amount = ethers.FixedNumber.from(formatBigNumber(ledger.amount))\n\n  return payout.subUnsafe(amount)\n}\n\nexport const getPriceDifference = (price: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\n  if (!price || !lockPrice) {\n    return ethers.BigNumber.from(0)\n  }\n\n  return price.sub(lockPrice)\n}\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { ArrowUpIcon, ArrowDownIcon, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { BetPosition } from 'state/types'\n\ninterface TagProps extends FlexProps {\n  bg?: string\n  startIcon?: ReactNode\n}\n\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\n  display: inline-flex;\n`\n\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\n\n  return (\n    <StyledTag\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderRadius=\"4px\"\n      bg={bg}\n      py=\"4px\"\n      px=\"8px\"\n      onClick={onClick}\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\n      {...props}\n    >\n      {icon}\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\n        {children}\n      </Text>\n    </StyledTag>\n  )\n}\n\ninterface PositionTagProps extends FlexProps {\n  betPosition: BetPosition\n}\n\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\n  const isUpPosition = betPosition === BetPosition.BULL\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\n\n  return (\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\n      {children}\n    </Tag>\n  )\n}\n\nexport default PositionTag\n","import React from 'react'\nimport styled, { DefaultTheme } from 'styled-components'\nimport { Box, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition, NodeRound, Round } from 'state/types'\nimport { formatUsdv2, formatBnbv2 } from '../../helpers'\nimport { formatBnb, formatUsd } from '../History/helpers'\n\n// PrizePoolRow\ninterface PrizePoolRowProps extends FlexProps {\n  totalAmount: NodeRound['totalAmount']\n}\n\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\n  if (!totalAmount) {\n    return '0'\n  }\n\n  return formatBnbv2(totalAmount)\n}\n\nconst Row = ({ children, ...props }) => {\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      {children}\n    </Flex>\n  )\n}\n\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text bold>{t('Prize Pool')}:</Text>\n      <Text bold>{`${getPrizePoolAmount(totalAmount)} BNB`}</Text>\n    </Row>\n  )\n}\n\n// Payout Row\ninterface PayoutRowProps extends FlexProps {\n  positionLabel: string\n  multiplier: number\n  amount: number\n}\n\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\n  const { t } = useTranslation()\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\n\n  return (\n    <Row height=\"18px\" {...props}>\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\n        {positionLabel}:\n      </Text>\n      <Flex alignItems=\"center\">\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\n        </Text>\n        <Text mx=\"4px\">|</Text>\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatBnb(amount)} BNB`}</Text>\n      </Flex>\n    </Row>\n  )\n}\n\ninterface LockPriceRowProps extends FlexProps {\n  lockPrice: NodeRound['lockPrice']\n}\n\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\n      <Text fontSize=\"14px\">{formatUsdv2(lockPrice)}</Text>\n    </Row>\n  )\n}\n\n// RoundResultBox\ninterface RoundResultBoxProps {\n  betPosition?: BetPosition\n  isNext?: boolean\n  isLive?: boolean\n  hasEntered?: boolean\n}\n\nconst getBackgroundColor = ({\n  theme,\n  betPosition,\n  isNext,\n  isLive,\n  hasEntered,\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\n  if (isNext) {\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\n  }\n\n  if (hasEntered || isLive) {\n    return theme.colors.secondary\n  }\n\n  if (betPosition === BetPosition.BULL) {\n    return theme.colors.success\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return theme.colors.failure\n  }\n\n  return theme.colors.cardBorder\n}\n\nconst Background = styled(Box)<RoundResultBoxProps>`\n  background: ${getBackgroundColor};\n  border-radius: 16px;\n  padding: 2px;\n`\n\nconst StyledRoundResultBox = styled.div`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 14px;\n  padding: 16px;\n`\n\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\n  isNext = false,\n  hasEntered = false,\n  isLive = false,\n  children,\n  ...props\n}) => {\n  return (\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\n    </Background>\n  )\n}\n\n/**\n * TODO: Remove\n *\n * This is a temporary function until we consolidate the data coming from the graph versus the node\n */\ninterface PrizePoolHistoryRowProps extends FlexProps {\n  totalAmount: number\n}\n\nconst getPrizePoolAmountHistory = (totalAmount: PrizePoolHistoryRowProps['totalAmount']) => {\n  if (!totalAmount) {\n    return '0'\n  }\n\n  return formatBnb(totalAmount)\n}\n\nexport const PrizePoolHistoryRow: React.FC<PrizePoolHistoryRowProps> = ({ totalAmount, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text bold>{t('Prize Pool')}:</Text>\n      <Text bold>{`${getPrizePoolAmountHistory(totalAmount)} BNB`}</Text>\n    </Row>\n  )\n}\n\ninterface LockPriceHistoryRowProps extends FlexProps {\n  lockPrice: Round['lockPrice']\n}\n\nexport const LockPriceHistoryRow: React.FC<LockPriceHistoryRowProps> = ({ lockPrice, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\n    </Row>\n  )\n}\n/**\n * END TEMPORARY COMPONENTS\n */\n","import React from 'react'\nimport { ethers } from 'ethers'\nimport { BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\nimport { BetPosition, NodeRound } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatUsdv2, getPriceDifference } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { LockPriceRow, PrizePoolRow, RoundResultBox } from './styles'\n\ninterface RoundResultProps extends BoxProps {\n  round: NodeRound\n  hasFailed?: boolean\n}\n\nconst getBetPosition = (closePrice: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\n  if (!closePrice) {\n    return null\n  }\n\n  if (closePrice.eq(lockPrice)) {\n    return BetPosition.HOUSE\n  }\n\n  return closePrice.gt(lockPrice) ? BetPosition.BULL : BetPosition.BEAR\n}\n\nconst RoundResult: React.FC<RoundResultProps> = ({ round, hasFailed = false, children, ...props }) => {\n  const { lockPrice, closePrice, totalAmount } = round\n  const betPosition = getBetPosition(closePrice, lockPrice)\n  const isPositionUp = betPosition === BetPosition.BULL\n  const { t } = useTranslation()\n  const priceDifference = getPriceDifference(closePrice, lockPrice)\n\n  return (\n    <RoundResultBox betPosition={betPosition} {...props}>\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n        {t('Closed Price')}\n      </Text>\n      {hasFailed ? (\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\n          {t('Canceled')}\n        </Text>\n      ) : (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          {closePrice ? (\n            <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\n              {formatUsdv2(closePrice)}\n            </Text>\n          ) : (\n            <Skeleton height=\"34px\" my=\"1px\" />\n          )}\n          <PositionTag betPosition={betPosition}>{formatUsdv2(priceDifference)}</PositionTag>\n        </Flex>\n      )}\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n      <PrizePoolRow totalAmount={totalAmount} />\n      {children}\n    </RoundResultBox>\n  )\n}\n\nexport default RoundResult\n","import React from 'react'\nimport { BoxProps, Flex, Text } from '@pancakeswap/uikit'\nimport { BetPosition, Round } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatUsd } from '../History/helpers'\nimport PositionTag from '../PositionTag'\nimport { LockPriceHistoryRow, PrizePoolHistoryRow, RoundResultBox } from './styles'\n\ninterface RoundResultProps extends BoxProps {\n  round: Round\n}\n\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\n  const { lockPrice, closePrice, totalAmount } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const isPositionUp = betPosition === BetPosition.BULL\n  const { t } = useTranslation()\n  const priceDifference = closePrice - lockPrice\n\n  return (\n    <RoundResultBox betPosition={betPosition} {...props}>\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n        {t('Closed Price')}\n      </Text>\n      {round.failed ? (\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\n          {t('Canceled')}\n        </Text>\n      ) : (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\n            {formatUsd(closePrice)}\n          </Text>\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\n        </Flex>\n      )}\n      {lockPrice && <LockPriceHistoryRow lockPrice={lockPrice} />}\n      <PrizePoolHistoryRow totalAmount={totalAmount} />\n      {children}\n    </RoundResultBox>\n  )\n}\n\nexport default RoundResult\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { getPredictionsContract } from 'utils/contractHelpers'\n\nconst useIsRefundable = (epoch: number) => {\n  const [isRefundable, setIsRefundable] = useState(false)\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchRefundableStatus = async () => {\n      const predictionsContract = getPredictionsContract()\n      const canClaim = await predictionsContract.claimable(epoch, account)\n\n      if (canClaim) {\n        const refundable = await predictionsContract.refundable(epoch, account)\n        setIsRefundable(refundable)\n      } else {\n        setIsRefundable(false)\n      }\n    }\n\n    if (account) {\n      fetchRefundableStatus()\n    }\n  }, [account, epoch, setIsRefundable])\n\n  return { isRefundable, setIsRefundable }\n}\n\nexport default useIsRefundable\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon, LinkExternal, useTooltip, InfoIcon } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetRewardRate, usePriceBnbBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport { Bet, BetPosition } from 'state/types'\nimport { fetchLedgerData, markBetHistoryAsCollected } from 'state/predictions'\nimport { Result } from 'state/predictions/helpers'\nimport { getBscScanLink } from 'utils'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { formatBnb, getNetPayout } from './helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport PositionTag from '../PositionTag'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\n\ninterface BetResultProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetResult = styled(Box)`\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  border-radius: 16px;\n  margin-bottom: 24px;\n  padding: 16px;\n`\n\nconst Divider = styled.hr`\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\n  const bnbBusdPrice = usePriceBnbBusd()\n  const canClaim = !bet.claimed && bet.position === bet.round.position\n  const rewardRate = useGetRewardRate()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <Text as=\"p\">{t('Includes your original position and your winnings, minus the %fee% fee.', { fee: '3%' })}</Text>,\n    { placement: 'auto' },\n  )\n\n  const isWinner = result === Result.WIN\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = isWinner ? getNetPayout(bet, rewardRate) : bet.amount\n  const returned = payout + bet.amount\n\n  const getHeaderColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'warning'\n      case Result.LOSE:\n        return 'textSubtle'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getHeaderText = () => {\n    switch (result) {\n      case Result.WIN:\n        return t('Win')\n      case Result.LOSE:\n        return t('Lose')\n      case Result.CANCELED:\n        return t('Canceled')\n      default:\n        return ''\n    }\n  }\n\n  const getHeaderIcon = () => {\n    switch (result) {\n      case Result.WIN:\n        return <PrizeIcon color={getHeaderColor()} />\n      case Result.LOSE:\n      case Result.CANCELED:\n        return <BlockIcon color={getHeaderColor()} />\n      default:\n        return null\n    }\n  }\n\n  const getResultColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n      default:\n        return 'text'\n    }\n  }\n\n  const handleSuccess = async () => {\n    // We have to mark the bet as claimed immediately because it does not update fast enough\n    dispatch(markBetHistoryAsCollected({ account, betId: bet.id }))\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\n  }\n\n  return (\n    <>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Heading>{t('Your History')}</Heading>\n        <Flex alignItems=\"center\">\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\n            {getHeaderText()}\n          </Heading>\n          {getHeaderIcon()}\n        </Flex>\n      </Flex>\n      <StyledBetResult>\n        {result === Result.WIN && !canClaim && (\n          <CollectWinningsButton\n            payout={formatBnb(payout)}\n            betAmount={bet.amount.toString()}\n            epoch={bet.round.epoch}\n            hasClaimed={!canClaim}\n            width=\"100%\"\n            mb=\"16px\"\n            onSuccess={handleSuccess}\n          >\n            {bet.claimed ? t('Already Collected') : t('Collect Winnings')}\n          </CollectWinningsButton>\n        )}\n        {bet.claimed && (\n          <Flex justifyContent=\"center\">\n            <LinkExternal href={getBscScanLink(bet.claimedHash, 'transaction')} mb=\"16px\">\n              {t('View on BscScan')}\n            </LinkExternal>\n          </Flex>\n        )}\n        {result === Result.CANCELED && isRefundable && (\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\n        )}\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your direction')}:</Text>\n          <PositionTag betPosition={bet.position}>\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your position')}</Text>\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\n        </Flex>\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\n          <Text bold>{isWinner ? t('Your winnings') : t('Your Result')}:</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text bold color={getResultColor()}>{`${isWinner ? '+' : '-'}${formatBnb(payout)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\n            </Text>\n          </Box>\n        </Flex>\n        {isWinner && (\n          <>\n            <Divider />\n            <Flex alignItems=\"start\" justifyContent=\"space-between\">\n              <Text fontSize=\"14px\" color=\"textSubtle\">\n                {t('Amount to collect')}:\n              </Text>\n              <Flex justifyContent=\"end\">\n                <Text fontSize=\"14px\" color=\"textSubtle\">{`${formatBnb(returned)} BNB`}</Text>\n                <span ref={targetRef}>\n                  <InfoIcon color=\"textSubtle\" ml=\"4px\" />\n                </span>\n              </Flex>\n              {tooltipVisible && tooltip}\n            </Flex>\n          </>\n        )}\n      </StyledBetResult>\n    </>\n  )\n}\n\nexport default BetResult\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Bet } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport { Flex, Text, Link, Heading } from '@pancakeswap/uikit'\nimport { Result } from 'state/predictions/helpers'\nimport { PayoutRow, RoundResultHistory } from '../RoundResult'\nimport BetResult from './BetResult'\nimport { getMultiplier } from './helpers'\n\ninterface BetDetailsProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetDetails = styled.div`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  padding: 24px;\n`\n\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const { totalAmount, bullAmount, bearAmount } = bet.round\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\n\n  return (\n    <StyledBetDetails>\n      {result === Result.CANCELED && (\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\n          {t(\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\n          )}\n        </Text>\n      )}\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\n      <RoundResultHistory round={bet.round} mb=\"24px\">\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\n      </RoundResultHistory>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text>{t('Opening Block')}</Text>\n        <Link href={getBscScanLink(bet.round.lockBlock, 'block')} external>\n          {bet.round.lockBlock}\n        </Link>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text>{t('Closing Block')}</Text>\n        <Link href={getBscScanLink(bet.round.endBlock, 'block')} external>\n          {bet.round.endBlock}\n        </Link>\n      </Flex>\n    </StyledBetDetails>\n  )\n}\n\nexport default BetDetails\n","import React, { useState } from 'react'\nimport {\n  Box,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Flex,\n  IconButton,\n  PlayCircleOutlineIcon,\n  Text,\n  WaitIcon,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { useAppDispatch } from 'state'\nimport { Bet, PredictionStatus } from 'state/types'\nimport { useGetCurrentEpoch, useGetPredictionsStatus, useGetRewardRate } from 'state/hooks'\nimport { fetchLedgerData, markBetHistoryAsCollected } from 'state/predictions'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb, getNetPayout } from './helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport BetDetails from './BetDetails'\n\ninterface BetProps {\n  bet: Bet\n}\n\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  cursor: pointer;\n`\n\nconst YourResult = styled(Box)`\n  flex: 1;\n`\n\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { amount, round } = bet\n\n  const { t } = useTranslation()\n  const currentEpoch = useGetCurrentEpoch()\n  const status = useGetPredictionsStatus()\n  const rewardRate = useGetRewardRate()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  const getRoundColor = (result) => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getRoundPrefix = (result) => {\n    if (result === Result.LOSE) {\n      return '-'\n    }\n\n    if (result === Result.WIN) {\n      return '+'\n    }\n\n    return ''\n  }\n\n  const roundResult = getRoundResult(bet, currentEpoch)\n  const resultTextColor = getRoundColor(roundResult)\n  const resultTextPrefix = getRoundPrefix(roundResult)\n  const isOpenRound = round.epoch === currentEpoch\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\n  const canClaim = !bet.claimed && bet.position === bet.round.position\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = roundResult === Result.WIN ? getNetPayout(bet, rewardRate) : amount\n\n  const renderBetLabel = () => {\n    if (isOpenRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"primary\" bold>\n            {t('Starting Soon')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    if (isLiveRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"secondary\" bold>\n            {t('Live Now')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    return (\n      <>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Your Result')}\n        </Text>\n        <Text bold color={resultTextColor} lineHeight={1}>\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\n        </Text>\n      </>\n    )\n  }\n\n  const handleSuccess = async () => {\n    // We have to mark the bet as claimed immediately because it does not update fast enough\n    dispatch(markBetHistoryAsCollected({ account, betId: bet.id }))\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\n  }\n\n  return (\n    <>\n      <StyledBet onClick={toggleOpen} role=\"button\">\n        <Box width=\"48px\">\n          <Text textAlign=\"center\">\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {t('Round')}\n            </Text>\n            <Text bold lineHeight={1}>\n              {round.epoch.toLocaleString()}\n            </Text>\n          </Text>\n        </Box>\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\n        {roundResult === Result.WIN && canClaim && (\n          <CollectWinningsButton\n            hasClaimed={!canClaim}\n            epoch={bet.round.epoch}\n            payout={formatBnb(payout)}\n            onSuccess={handleSuccess}\n            betAmount={bet.amount.toString()}\n            scale=\"sm\"\n            mr=\"8px\"\n          >\n            {t('Collect')}\n          </CollectWinningsButton>\n        )}\n        {roundResult === Result.CANCELED && canClaim && (\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\n            {t('Reclaim')}\n          </ReclaimPositionButton>\n        )}\n        {!isOpenRound && !isLiveRound && (\n          <IconButton variant=\"text\" scale=\"sm\">\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\n          </IconButton>\n        )}\n      </StyledBet>\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\n    </>\n  )\n}\n\nexport default HistoricalBet\n","import React from 'react'\nimport { orderBy } from 'lodash'\nimport { Box, Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Bet } from 'state/types'\nimport HistoricalBet from './HistoricalBet'\n\ninterface RoundsTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n\n  return hasBetHistory ? (\n    <>\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\n        <HistoricalBet key={bet.id} bet={bet} />\n      ))}\n    </>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default RoundsTab\n","// @ts-nocheck\n/**\n * There is ts-nocheck at the top of this file for the following reasons:\n * 1. You can't ignore block in TS at the moment https://stackoverflow.com/questions/51145180/how-to-use-ts-ignore-for-a-block\n * 2. Interpolations in keyframes are indeed supported and work fine https://github.com/styled-components/styled-components/issues/2263\n * But TypeScript definitions are not updated to reflect that - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/48907\n * 3. Since this error is in the middle of a template string there is no way to add @ts-ignore on just that one line\n * without also messing prettier.\n *\n * I'll leave TODO: comment here to check back later if there is update to types\n *\n */\nimport styled, { keyframes } from 'styled-components'\n\ninterface SliceProps {\n  length: number\n  offset?: number\n}\n\nexport const DrawAnimation = keyframes`\n  from {\n    stroke-dasharray: 0, 339.292\n  }\n  to {\n    stroke-dasharray: ${({ length }: SliceProps) => length} 339.292;\n  }\n`\n\nexport const OffsetAnimation = keyframes`\n  from {\n    stroke-dashoffset: 0\n  }\n  to {\n    stroke-dashoffset: ${(props) => -props.offset};\n  }\n`\n\nexport const SVG = styled.svg`\n  width: 128px;\n  height: 128px;\n  transform: rotate(-90deg);\n`\n\nconst DefaultSlice = styled.circle<SliceProps>`\n  fill: none;\n  stroke-width: 16;\n  stroke-dasharray: ${(props) => `${props.length} 339.292`};\n`\n\nexport const LostSlice = styled(DefaultSlice)`\n  stroke: #ed4b9e;\n  animation: ${DrawAnimation} 1s ease;\n`\n\nexport const WonSlice = styled(DefaultSlice)`\n  stroke: #31d0aa;\n  stroke-dashoffset: ${(props) => -props.offset};\n  animation: ${DrawAnimation} 1s ease, ${OffsetAnimation} 1s ease;\n`\n\nexport const Wrapper = styled.div`\n  position: relative;\n  width: 128px;\n  height: 128px;\n`\n\nexport const Info = styled.div`\n  width: 128px;\n  height: 128px;\n  border-radius: 50%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 2;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { SVG, WonSlice, LostSlice, Wrapper, Info } from './PnlChartStyles'\n\n/**\n * Bare minimum chart that doesn't require any external dependencies\n * For details read here - https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\n */\n\ninterface PnlChartProps {\n  won: number\n  lost: number\n}\n\n// 2 * Pi * R\nconst CIRCUMFERENCE = 339.292\n\nconst PnlChart: React.FC<PnlChartProps> = ({ lost, won }) => {\n  const { t } = useTranslation()\n  const percentageWon = ((won * 100) / (lost + won)).toFixed(2)\n  const paintLost = (lost / (won + lost)) * CIRCUMFERENCE\n  const paintWon = CIRCUMFERENCE - paintLost\n  return (\n    <Wrapper>\n      <SVG viewBox=\"0 0 128 128\">\n        <LostSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintLost} />\n        <WonSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintWon} offset={paintLost} />\n      </SVG>\n      <Info>\n        <Text small lineHeight=\"1\">\n          {t('Won')}\n        </Text>\n        <Text bold fontSize=\"20px\" lineHeight=\"1\">\n          {won}/{won + lost}\n        </Text>\n        <Text small lineHeight=\"1\" color=\"textSubtle\">\n          {percentageWon}%\n        </Text>\n      </Info>\n    </Wrapper>\n  )\n}\n\nexport default PnlChart\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb } from '../helpers'\n\ntype SummaryType = 'won' | 'lost' | 'entered'\n\ninterface SummaryRowProps {\n  type: SummaryType\n  summary: any\n  bnbBusdPrice: BigNumber\n}\n\nconst summaryTypeColors = {\n  won: 'success',\n  lost: 'failure',\n  entered: 'text',\n}\n\nconst summaryTypeSigns = {\n  won: '+',\n  lost: '-',\n  entered: '',\n}\n\nconst SummaryRow: React.FC<SummaryRowProps> = ({ type, summary, bnbBusdPrice }) => {\n  const { t } = useTranslation()\n\n  const color = summaryTypeColors[type]\n  const { rounds, amount } = summary[type]\n  const totalRounds = summary.entered.rounds\n  const roundsInPercents = ((rounds * 100) / totalRounds).toFixed(2)\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1)\n  const displayAmount = type === 'won' ? summary[type].payout : amount\n\n  return (\n    <>\n      <Text mt=\"16px\" bold color=\"textSubtle\">\n        {t(typeTranslationKey)}\n      </Text>\n      <Flex>\n        <Flex flex=\"2\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {rounds} {t('Rounds').toLocaleLowerCase()}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`}\n          </Text>\n        </Flex>\n        <Flex flex=\"3\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {`${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {`~$${formatBnb(bnbBusdPrice.times(displayAmount).toNumber())}`}\n          </Text>\n        </Flex>\n      </Flex>\n    </>\n  )\n}\n\nexport default SummaryRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { getBscScanLink } from 'utils'\nimport store from 'state'\nimport { useGetCurrentEpoch, usePriceBnbBusd } from 'state/hooks'\nimport { Bet, BetPosition } from 'state/types'\nimport { formatBnb, getMultiplier, getNetPayout } from '../helpers'\nimport PnlChart from './PnlChart'\nimport SummaryRow from './SummaryRow'\n\ninterface PnlTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\ninterface PnlCategory {\n  rounds: number\n  amount: number\n}\n\ninterface PnlSummary {\n  won: PnlCategory & { payout: number; bestRound: { id: string; payout: number; multiplier: number } }\n  lost: PnlCategory\n  entered: PnlCategory\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  height: 1px;\n  margin: 24px auto;\n  width: 100%;\n`\n\nconst initialPnlSummary: PnlSummary = {\n  won: {\n    rounds: 0,\n    amount: 0,\n    payout: 0, // net payout after all deductions\n    bestRound: {\n      id: '0',\n      payout: 0, // net payout after all deductions\n      multiplier: 0,\n    },\n  },\n  lost: {\n    rounds: 0,\n    amount: 0,\n  },\n  entered: {\n    rounds: 0,\n    amount: 0,\n  },\n}\n\nconst getPnlSummary = (bets: Bet[], currentEpoch: number): PnlSummary => {\n  const state = store.getState()\n  const rewardRate = state.predictions.rewardRate / 100\n\n  return bets.reduce((summary: PnlSummary, bet) => {\n    const roundResult = getRoundResult(bet, currentEpoch)\n    if (roundResult === Result.WIN) {\n      const payout = getNetPayout(bet, rewardRate)\n      let { bestRound } = summary.won\n      if (payout > bestRound.payout) {\n        const { bullAmount, bearAmount, totalAmount } = bet.round\n        const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n        bestRound = { id: bet.round.id, payout, multiplier }\n      }\n      return {\n        won: {\n          rounds: summary.won.rounds + 1,\n          amount: summary.won.amount + bet.amount,\n          payout: summary.won.payout + payout,\n          bestRound,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        lost: summary.lost,\n      }\n    }\n    if (roundResult === Result.LOSE) {\n      return {\n        lost: {\n          rounds: summary.lost.rounds + 1,\n          amount: summary.lost.amount + bet.amount,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        won: summary.won,\n      }\n    }\n    // Ignore Canceled and Live rounds\n    return summary\n  }, initialPnlSummary)\n}\n\nconst PnlTab: React.FC<PnlTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const bnbBusdPrice = usePriceBnbBusd()\n\n  const summary = getPnlSummary(bets, currentEpoch)\n  const netResultAmount = summary.won.payout - summary.lost.amount\n  const netResultIsPositive = netResultAmount > 0\n  const avgPositionEntered = summary.entered.amount / summary.entered.rounds\n  const avgBnbWonPerRound = netResultAmount / summary.entered.rounds\n  const avgBnbWonIsPositive = avgBnbWonPerRound > 0\n\n  // Guard in case user has only lost rounds\n  const hasBestRound = summary.won.bestRound.payout !== 0\n\n  return hasBetHistory ? (\n    <Box p=\"16px\">\n      <Text bold fontSize=\"24px\" color=\"secondary\" pb=\"24px\">\n        {t('Your history')}\n      </Text>\n      <Flex>\n        <PnlChart lost={summary.lost.rounds} won={summary.won.rounds} />\n        <Flex flexDirection=\"column\" justifyContent=\"center\" pl=\"24px\">\n          <Text bold color=\"textSubtle\">\n            {t('Net results')}\n          </Text>\n          <Text bold fontSize=\"24px\" lineHeight=\"1\" color={netResultIsPositive ? 'success' : 'failure'}>\n            {`${netResultIsPositive ? '+' : ''}${formatBnb(netResultAmount)} BNB`}\n          </Text>\n          <Text small color=\"textSubtle\">\n            {`~$${formatBnb(bnbBusdPrice.times(netResultAmount).toNumber())}`}\n          </Text>\n        </Flex>\n      </Flex>\n      <Box pl=\"8px\">\n        <Text mt=\"24px\" bold color=\"textSubtle\">\n          {t('Average return / round')}\n        </Text>\n        <Text bold color={avgBnbWonIsPositive ? 'success' : 'failure'}>\n          {`${avgBnbWonIsPositive ? '+' : ''}${formatBnb(avgBnbWonPerRound)} BNB`}\n        </Text>\n        <Text small color=\"textSubtle\">\n          {`~$${formatBnb(bnbBusdPrice.times(avgBnbWonPerRound).toNumber())}`}\n        </Text>\n\n        {hasBestRound && (\n          <>\n            <Text mt=\"16px\" bold color=\"textSubtle\">\n              {t('Best round: #%roundId%', { roundId: summary.won.bestRound.id })}\n            </Text>\n            <Flex alignItems=\"flex-end\">\n              <Text bold color=\"success\">{`+${formatBnb(summary.won.bestRound.payout)} BNB`}</Text>\n              <Text ml=\"4px\" small color=\"textSubtle\">\n                ({summary.won.bestRound.multiplier.toFixed(2)}x)\n              </Text>\n            </Flex>\n            <Text small color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(summary.won.bestRound.payout).toNumber())}`}\n            </Text>\n          </>\n        )}\n\n        <Text mt=\"16px\" bold color=\"textSubtle\">\n          {t('Average position entered / round')}\n        </Text>\n        <Text bold>{`${formatBnb(avgPositionEntered)} BNB`}</Text>\n        <Text small color=\"textSubtle\">\n          {`~$${formatBnb(bnbBusdPrice.times(avgPositionEntered).toNumber())}`}\n        </Text>\n\n        <Divider />\n\n        <SummaryRow type=\"won\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"lost\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"entered\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n\n        <Flex justifyContent=\"center\" mt=\"24px\">\n          <Link href={`${getBscScanLink(account, 'address')}#internaltx`} mb=\"16px\" external>\n            <Button mt=\"8px\" width=\"100%\">\n              {t('View Reclaimed & Won')}\n              <OpenNewIcon color=\"white\" ml=\"4px\" />\n            </Button>\n          </Link>\n        </Flex>\n      </Box>\n    </Box>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default PnlTab\n","import React, { useEffect, useState } from 'react'\nimport { Flex, Spinner, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { fetchHistory } from 'state/predictions'\nimport { getUnclaimedWinningBets } from 'state/predictions/helpers'\nimport { HistoryFilter } from 'state/types'\nimport { useAppDispatch } from 'state'\nimport {\n  useGetCurrentEpoch,\n  useGetHistoryByAccount,\n  useGetHistoryFilter,\n  useGetIsFetchingHistory,\n  useIsHistoryPaneOpen,\n} from 'state/hooks'\nimport { Header, HistoryTabs } from './components/History'\nimport RoundsTab from './components/History/RoundsTab'\nimport PnlTab from './components/History/PnlTab/PnlTab'\n\nconst StyledHistory = styled.div`\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst BetWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n  overflow-y: auto;\n  position: relative;\n`\n\nconst SpinnerWrapper = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst History = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const historyFilter = useGetHistoryFilter()\n  const currentEpoch = useGetCurrentEpoch()\n  const { t } = useTranslation()\n  const bets = useGetHistoryByAccount(account)\n  const [activeTab, setActiveTab] = useState(HistoryTabs.ROUNDS)\n\n  useEffect(() => {\n    if (account && isHistoryPaneOpen) {\n      dispatch(fetchHistory({ account }))\n    }\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\n\n  // Currently the api cannot filter by unclaimed AND won so we do it here\n  // when the user has selected Uncollected only include positions they won\n  const results = historyFilter === HistoryFilter.UNCOLLECTED ? getUnclaimedWinningBets(bets) : bets\n\n  const hasBetHistory = results && results.length > 0\n\n  let activeTabComponent = null\n\n  switch (activeTab) {\n    case HistoryTabs.PNL:\n      activeTabComponent = <PnlTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n    case HistoryTabs.ROUNDS:\n    default:\n      activeTabComponent = <RoundsTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n  }\n\n  if (!account) {\n    activeTabComponent = (\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"32px\">\n        <UnlockButton />\n        <Text mt=\"8px\">{t('Connect your wallet to view your prediction history')}</Text>\n      </Flex>\n    )\n  }\n\n  return (\n    <StyledHistory>\n      <Header activeTab={activeTab} setActiveTab={setActiveTab} />\n      <BetWrapper>\n        {isFetchingHistory ? (\n          <SpinnerWrapper>\n            <Spinner size={72} />\n          </SpinnerWrapper>\n        ) : (\n          activeTabComponent\n        )}\n      </BetWrapper>\n    </StyledHistory>\n  )\n}\n\nexport default History\n","import React from 'react'\nimport { useTheme } from 'styled-components'\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\n\ninterface MultiplierProps extends SvgProps {\n  isActive: boolean\n}\n\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1.03125\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n","import React from 'react'\nimport { ethers } from 'ethers'\nimport styled from 'styled-components'\nimport { CheckmarkCircleIcon, Tag, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnbv2 } from '../../helpers'\n\ninterface EnteredTagProps {\n  amount?: ethers.BigNumber\n}\n\nconst StyledEnteredTag = styled(Tag).attrs({\n  variant: 'secondary',\n  startIcon: <CheckmarkCircleIcon width=\"18px\" />,\n})`\n  font-weight: bold;\n  text-transform: uppercase;\n`\n\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount }) => {\n  const { t } = useTranslation()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(amount)} BNB`}</div>,\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <span ref={targetRef}>\n        <StyledEnteredTag>{t('Entered')}</StyledEnteredTag>{' '}\n      </span>{' '}\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default EnteredTag\n","import React from 'react'\nimport { ethers } from 'ethers'\nimport styled, { CSSProperties } from 'styled-components'\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition } from 'state/types'\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\nimport EnteredTag from './EnteredTag'\n\ninterface MultiplierArrowProps {\n  betAmount?: ethers.BigNumber\n  multiplier?: string\n  hasEntered?: boolean\n  betPosition?: BetPosition\n  isDisabled?: boolean\n  isActive?: boolean\n}\n\nconst ArrowWrapper = styled.div`\n  height: 65px;\n  margin: 0 auto;\n  width: 240px;\n`\n\nconst Content = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst EnteredTagWrapper = styled.div`\n  position: absolute;\n  z-index: 10;\n`\n\nconst getTextColor =\n  (fallback = 'textSubtle') =>\n  (isActive: boolean, isDisabled: boolean) => {\n    if (isDisabled) {\n      return 'textDisabled'\n    }\n\n    if (isActive) {\n      return 'white'\n    }\n\n    return fallback\n  }\n\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\n  betAmount,\n  multiplier,\n  hasEntered = false,\n  betPosition = BetPosition.BULL,\n  isDisabled = false,\n  isActive = false,\n}) => {\n  const { t } = useTranslation()\n  const upColor = getTextColor('success')(isActive, isDisabled)\n  const downColor = getTextColor('failure')(isActive, isDisabled)\n  const textColor = getTextColor()(isActive, isDisabled)\n  const multiplierText = (\n    <Box>\n      <Flex justifyContent=\"center\" height=\"14px\">\n        <Text fontSize=\"14px\" color={textColor} bold lineHeight=\"14x\">\n          {multiplier !== undefined ? `${multiplier}x` : '-'}\n        </Text>\n        <Text fontSize=\"14px\" color={textColor} lineHeight=\"14x\" ml=\"4px\">\n          {t('Payout')}\n        </Text>\n      </Flex>\n    </Box>\n  )\n\n  const getEnteredTag = (position: CSSProperties) => {\n    if (!hasEntered) {\n      return null\n    }\n\n    return (\n      <EnteredTagWrapper style={position}>\n        <EnteredTag amount={betAmount} />\n      </EnteredTagWrapper>\n    )\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return (\n      <Box position=\"relative\">\n        <ArrowWrapper>\n          <RoundMultiplierDownArrow isActive={isActive} />\n          {getEnteredTag({ bottom: 0, right: 0 })}\n          <Content>\n            {!isDisabled && multiplierText}\n            <Text bold fontSize=\"20px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\n              {t('Down')}\n            </Text>\n          </Content>\n        </ArrowWrapper>\n      </Box>\n    )\n  }\n\n  return (\n    <Box position=\"relative\">\n      <ArrowWrapper>\n        <RoundMultiplierUpArrow isActive={isActive} />\n        {getEnteredTag({ top: 0, left: 0 })}\n        <Content>\n          <Text bold fontSize=\"20px\" lineHeight=\"21px\" color={upColor} textTransform=\"uppercase\">\n            {t('Up')}\n          </Text>\n          {!isDisabled && multiplierText}\n        </Content>\n      </ArrowWrapper>\n    </Box>\n  )\n}\n\nexport default MultiplierArrow\n","import styled from 'styled-components'\nimport { Card as UIKitCard } from '@pancakeswap/uikit'\n\nconst Card = styled(UIKitCard)`\n  border-radius: 16px;\n`\n\nexport default Card\n","import React, { ReactElement } from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport styled, { DefaultTheme } from 'styled-components'\n\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\n\ninterface CardHeaderProps {\n  status: Status\n  title: string\n  epoch: number\n  blockNumber: number\n  icon?: ReactElement\n}\n\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\n  switch (status) {\n    case 'calculating':\n      return theme.colors.gradients.cardHeader\n    case 'live':\n      return 'transparent'\n    case 'canceled':\n      return theme.colors.warning\n    case 'next':\n      return theme.colors.secondary\n    case 'expired':\n    case 'soon':\n    default:\n      return theme.colors.cardBorder\n  }\n}\n\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\ntype FallbackColor = 'text' | 'textSubtle'\n\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\n  switch (status) {\n    case 'expired':\n      return 'textDisabled'\n    case 'next':\n      return 'white'\n    case 'live':\n      return 'secondary'\n    case 'canceled':\n    case 'calculating':\n      return 'text'\n    default:\n      return fallback\n  }\n}\n\nconst StyledCardHeader = styled.div<{ status: Status }>`\n  align-items: center;\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\n  border-radius: 16px 16px 0 0;\n  display: flex;\n  justify-content: space-between;\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\n`\n\nconst Round = styled.div`\n  justify-self: center;\n`\n\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\n  const textColor = getTextColorByStatus(status, 'text')\n  const isLive = status === 'live'\n\n  return (\n    <StyledCardHeader status={status}>\n      <Flex alignItems=\"center\">\n        {icon}\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\n          {title}\n        </Text>\n      </Flex>\n      <Round>\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\n          {`#${epoch}`}\n        </Text>\n      </Round>\n    </StyledCardHeader>\n  )\n}\n\nexport default CardHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { useGetIsClaimable } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport CollectWinningsButton from '../CollectWinningsButton'\n\ninterface CollectWinningsOverlayProps {\n  epoch: number\n  payout: string\n  betAmount: string\n  isBottom?: boolean\n}\n\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\n  background-color: ${({ theme }) => theme.colors.secondary};\n  left: 0;\n  position: absolute;\n  width: 100%;\n  z-index: 30;\n\n  ${({ isBottom }) => {\n    return isBottom\n      ? `\n      border-radius: 0 0 16px 16px;\n      bottom: 0;\n    `\n      : `\n      top: 37px; // Card header height\n    `\n  }}\n`\n\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({\n  epoch,\n  payout,\n  betAmount,\n  isBottom = false,\n  ...props\n}) => {\n  const { t } = useTranslation()\n  const isClaimable = useGetIsClaimable(epoch)\n\n  if (!isClaimable) {\n    return null\n  }\n\n  return (\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\n      <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n      <CollectWinningsButton payout={payout} betAmount={betAmount} epoch={epoch} hasClaimed={false} width=\"100%\">\n        {t('Collect Winnings')}\n      </CollectWinningsButton>\n    </Wrapper>\n  )\n}\n\nexport default CollectWinningsOverlay\n","import React from 'react'\nimport { CardBody, Text, Flex, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition } from 'state/types'\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface CanceledRoundCardProps {\n  round: NodeRound\n}\n\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\n  const { epoch, startBlock } = round\n  const estimatedEndBlock = startBlock + interval\n\n  const handleSuccess = async () => {\n    setIsRefundable(false)\n  }\n\n  return (\n    <Card>\n      <CardHeader\n        status=\"canceled\"\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\n        title={t('Canceled')}\n        epoch={round.epoch}\n        blockNumber={estimatedEndBlock}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Flex flexDirection=\"column\" alignItems=\"center\">\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\n              {t('Round Canceled')}\n            </Text>\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\n            <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" external>\n              {t('Learn More')}\n            </LinkExternal>\n          </Flex>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default CanceledRoundCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, BlockIcon, CardBody } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition, NodeLedger } from 'state/types'\nimport { useBlock, useGetBetByEpoch } from 'state/hooks'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport { getHasRoundFailed, getNetPayoutv2 } from '../../helpers'\nimport { RoundResult } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\nimport CanceledRoundCard from './CanceledRoundCard'\n\ninterface ExpiredRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\nconst StyledExpiredRoundCard = styled(Card)`\n  opacity: 0.7;\n  transition: opacity 300ms;\n\n  &:hover {\n    opacity: 1;\n  }\n`\n\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { initialBlock } = useBlock()\n  const { epoch, endBlock, lockPrice, closePrice } = round\n\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const ledger = useGetBetByEpoch(account, epoch)\n  const payout = getNetPayoutv2(ledger, round)\n  const formattedPayout = payout.toUnsafeFloat().toFixed(4)\n  const hasRoundFailed = getHasRoundFailed(round, initialBlock)\n\n  if (hasRoundFailed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  return (\n    <Box position=\"relative\">\n      <StyledExpiredRoundCard>\n        <CardHeader\n          status=\"expired\"\n          icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\n          title={t('Expired')}\n          blockNumber={endBlock}\n          epoch={round.epoch}\n        />\n        <CardBody p=\"16px\" style={{ position: 'relative' }}>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            isActive={betPosition === BetPosition.BULL}\n            hasEntered={hasEnteredUp}\n          />\n          <RoundResult round={round} hasFailed={hasRoundFailed} />\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            isActive={betPosition === BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </StyledExpiredRoundCard>\n      <CollectWinningsOverlay\n        epoch={epoch}\n        payout={formattedPayout}\n        betAmount={betAmount ? formatBigNumberToFixed(betAmount, 4) : '0'}\n        isBottom={hasEnteredDown}\n      />\n    </Box>\n  )\n}\n\nexport default ExpiredRoundCard\n","import React from 'react'\nimport { Progress, ProgressProps } from '@pancakeswap/uikit'\nimport { useBlock } from 'state/hooks'\n\ninterface BlockProgressProps extends ProgressProps {\n  startBlock: number\n  endBlock: number\n}\n\nconst BlockProgress: React.FC<BlockProgressProps> = ({ startBlock, endBlock, ...props }) => {\n  const { currentBlock } = useBlock()\n  const rawProgress = ((currentBlock - startBlock) / (endBlock - startBlock)) * 100\n  const progress = rawProgress <= 100 ? rawProgress : 100\n\n  return <Progress primaryStep={progress} {...props} />\n}\n\nexport default BlockProgress\n","import React from 'react'\nimport { CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition } from 'state/types'\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface CalculatingCardProps {\n  round: NodeRound\n}\n\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const estimatedEndBlock = round.startBlock + interval\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('This round’s closing transaction has been submitted to the blockchain, and is awaiting confirmation.'),\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <Card>\n        <CardHeader\n          status=\"calculating\"\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n          title={t('Calculating')}\n          epoch={round.epoch}\n          blockNumber={estimatedEndBlock}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow isDisabled />\n          <RoundResultBox>\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n              <Spinner size={96} />\n              <Flex mt=\"8px\" ref={targetRef}>\n                <TooltipText>{t('Calculating')}</TooltipText>\n                <InfoIcon ml=\"4px\" />\n              </Flex>\n            </Flex>\n          </RoundResultBox>\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n        </CardBody>\n      </Card>\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default CalculatingCard\n","import React, { useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport { useCountUp } from 'react-countup'\nimport { CardBody, Flex, PlayCircleOutlineIcon, Skeleton, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, NodeLedger, BetPosition } from 'state/types'\nimport { BLOCK_PADDING } from 'state/predictions'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport { useBlock, useGetLastOraclePrice } from 'state/hooks'\nimport BlockProgress from 'components/BlockProgress'\nimport { formatUsdv2, getPriceDifference } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport CalculatingCard from './CalculatingCard'\n\ninterface LiveRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\nconst GradientBorder = styled.div`\n  background: linear-gradient(180deg, #53dee9 0%, #7645d9 100%);\n  border-radius: 16px;\n  padding: 1px;\n`\n\nconst GradientCard = styled(Card)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n`\n\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { lockPrice, lockBlock, endBlock, totalAmount } = round\n  const { currentBlock } = useBlock()\n  const price = useGetLastOraclePrice()\n\n  const isBull = lockPrice && price.gt(lockPrice)\n  const priceColor = isBull ? 'success' : 'failure'\n  const estimatedEndBlockPlusPadding = endBlock + BLOCK_PADDING\n\n  const priceDifference = getPriceDifference(price, lockPrice)\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: priceAsNumber,\n    duration: 1,\n    decimals: 3,\n  })\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\n    placement: 'bottom',\n  })\n\n  const updateRef = useRef(update)\n\n  useEffect(() => {\n    updateRef.current(priceAsNumber)\n  }, [priceAsNumber, updateRef])\n\n  if (currentBlock > estimatedEndBlockPlusPadding) {\n    return <CalculatingCard round={round} />\n  }\n\n  return (\n    <GradientBorder>\n      <GradientCard>\n        <CardHeader\n          status=\"live\"\n          icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\n          title={t('Live')}\n          epoch={round.epoch}\n          blockNumber={estimatedEndBlockPlusPadding}\n        />\n        <BlockProgress variant=\"flat\" scale=\"sm\" startBlock={lockBlock} endBlock={estimatedEndBlockPlusPadding} />\n        <CardBody p=\"16px\">\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            hasEntered={hasEnteredUp}\n            isActive={isBull}\n          />\n          <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n            <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n              {t('Last Price')}\n            </Text>\n            <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\n              <div ref={targetRef}>\n                <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\n                  {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\n                </TooltipText>\n              </div>\n              <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n                {formatUsdv2(priceDifference)}\n              </PositionTag>\n            </Flex>\n            {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n            <PrizePoolRow totalAmount={totalAmount} />\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n            isActive={!isBull}\n          />\n        </CardBody>\n      </GradientCard>\n      {tooltipVisible && tooltip}\n    </GradientBorder>\n  )\n}\n\nexport default LiveRoundCard\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\n\ninterface CardFlipProps {\n  isFlipped: boolean\n  height: string\n  children: [ReactNode, ReactNode]\n}\n\nconst Front = styled.div`\n  align-items: center;\n  backface-visibility: hidden;\n  display: flex;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  transition: z-index 600ms;\n  width: 100%;\n\n  & > div {\n    flex: 1;\n  }\n`\n\nconst Back = styled(Front)`\n  transform: rotateY(180deg);\n`\n\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\n  height: 100%;\n  position: relative;\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\n  transform-style: preserve-3d;\n  transition: transform 600ms;\n\n  ${Front} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\n  }\n\n  ${Back} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\n  }\n`\n\nconst StyledCardFlip = styled.div`\n  perspective: 1000px;\n  z-index: auto;\n`\n\nconst getComponents = (children: CardFlipProps['children']) => {\n  if (children.length !== 2) {\n    throw new Error('CardFlip: Two children are required')\n  }\n\n  return children\n}\n\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\n  const [front, back] = getComponents(children)\n\n  return (\n    <StyledCardFlip style={{ height }}>\n      <Inner isFlipped={isFlipped}>\n        <Front>{front}</Front>\n        <Back>{back}</Back>\n      </Inner>\n    </StyledCardFlip>\n  )\n}\n\nexport default CardFlip\n","import { useContext } from 'react'\nimport { SwiperContext } from '../context/SwiperProvider'\n\nconst useSwiper = () => {\n  const swiperContext = useContext(SwiperContext)\n\n  if (swiperContext === undefined) {\n    throw new Error('Swiper not found')\n  }\n\n  return swiperContext\n}\n\nexport default useSwiper\n","import styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\n\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\n  flex: 1;\n`\n\nexport default FlexRow\n","import React, { useEffect, useMemo, useState } from 'react'\nimport {\n  ArrowBackIcon,\n  CardBody,\n  CardHeader,\n  Flex,\n  Heading,\n  IconButton,\n  Button,\n  BinanceIcon,\n  Text,\n  BalanceInput,\n  Slider,\n  Box,\n  AutoRenewIcon,\n} from '@pancakeswap/uikit'\nimport { ethers } from 'ethers'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetMinBetAmount } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport useToast from 'hooks/useToast'\nimport { BetPosition } from 'state/types'\nimport { formatBigNumber, formatFixedNumber } from 'utils/formatBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport PositionTag from '../PositionTag'\nimport useSwiper from '../../hooks/useSwiper'\nimport FlexRow from '../FlexRow'\nimport Card from './Card'\n\ninterface SetPositionCardProps {\n  position: BetPosition\n  togglePosition: () => void\n  onBack: () => void\n  onSuccess: (decimalValue: string, hash: string) => Promise<void>\n}\n\n// /!\\ TEMPORARY /!\\\n// Set default gasPrice (6 gwei) when calling BetBull/BetBear before new contract is released fixing this 'issue'.\n// TODO: Remove on beta-v2 smart contract release.\nconst gasPrice = parseUnits('6', 'gwei')\nconst dust = parseUnits('0.01', 18)\nconst percentShortcuts = [10, 25, 50, 75]\n\nconst getButtonProps = (\n  value: ethers.BigNumber,\n  bnbBalance: ethers.BigNumber,\n  minBetAmountBalance: ethers.BigNumber,\n) => {\n  const hasSufficientBalance = () => {\n    if (value.gt(0)) {\n      return value.lte(bnbBalance)\n    }\n    return bnbBalance.gt(0)\n  }\n\n  if (!hasSufficientBalance()) {\n    return { key: 'Insufficient BNB balance', disabled: true }\n  }\n\n  if (value.eq(0)) {\n    return { key: 'Enter an amount', disabled: true }\n  }\n\n  return { key: 'Confirm', disabled: value.lt(minBetAmountBalance) }\n}\n\nconst getValueAsEthersBn = (value: string) => {\n  const valueAsFloat = parseFloat(value)\n  return Number.isNaN(valueAsFloat) ? ethers.BigNumber.from(0) : parseUnits(value)\n}\n\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, onBack, onSuccess }) => {\n  const [value, setValue] = useState('')\n  const [isTxPending, setIsTxPending] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [percent, setPercent] = useState(0)\n\n  const { account } = useWeb3React()\n  const { swiper } = useSwiper()\n  const { balance: bnbBalance } = useGetBnbBalance()\n  const minBetAmount = useGetMinBetAmount()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const predictionsContract = usePredictionsContract()\n\n  // Convert bnb balance to ethers.BigNumber\n  const bnbBalanceAsBn = useMemo(() => {\n    return ethers.BigNumber.from(bnbBalance.toString())\n  }, [bnbBalance])\n  const maxBalance = useMemo(() => {\n    return bnbBalanceAsBn.gt(dust) ? bnbBalanceAsBn.sub(dust) : dust\n  }, [bnbBalanceAsBn])\n  const balanceDisplay = formatBigNumber(bnbBalanceAsBn)\n\n  const valueAsBn = getValueAsEthersBn(value)\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\n\n  const handleInputChange = (input: string) => {\n    const inputAsBn = getValueAsEthersBn(input)\n\n    if (inputAsBn.eq(0)) {\n      setPercent(0)\n    } else {\n      const inputAsFn = ethers.FixedNumber.from(inputAsBn)\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\n      const hundredAsFn = ethers.FixedNumber.from(100)\n      const percentage = inputAsFn.divUnsafe(maxValueAsFn).mulUnsafe(hundredAsFn)\n      const percentageAsFloat = percentage.toUnsafeFloat()\n\n      setPercent(percentageAsFloat > 100 ? 100 : percentageAsFloat)\n    }\n    setValue(input)\n  }\n\n  const handlePercentChange = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\n      const hundredAsFn = ethers.FixedNumber.from(100)\n      const sliderPercentAsFn = ethers.FixedNumber.from(sliderPercent.toFixed(18)).divUnsafe(hundredAsFn)\n      const balancePercentage = maxValueAsFn.mulUnsafe(sliderPercentAsFn)\n      setValue(formatFixedNumber(balancePercentage))\n    } else {\n      setValue('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  // Clear value\n  const handleGoBack = () => {\n    setValue('')\n    setPercent(0)\n    onBack()\n  }\n\n  // Disable the swiper events to avoid conflicts\n  const handleMouseOver = () => {\n    swiper.keyboard.disable()\n    swiper.mousewheel.disable()\n    swiper.detachEvents()\n  }\n\n  const handleMouseOut = () => {\n    swiper.keyboard.enable()\n    swiper.mousewheel.enable()\n    swiper.attachEvents()\n  }\n\n  const { key, disabled } = getButtonProps(valueAsBn, maxBalance, minBetAmount)\n\n  const handleEnterPosition = async () => {\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\n\n    try {\n      const tx = await predictionsContract[betMethod]({ value: valueAsBn.toString(), gasPrice })\n      setIsTxPending(true)\n      const receipt = await tx.wait()\n      onSuccess(valueAsBn.toString(), receipt.transactionHash as string)\n    } catch {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    } finally {\n      setIsTxPending(false)\n    }\n  }\n\n  // Warnings\n  useEffect(() => {\n    const inputAmount = getValueAsEthersBn(value)\n    const hasSufficientBalance = inputAmount.gt(0) && inputAmount.lte(maxBalance)\n\n    if (!hasSufficientBalance) {\n      setErrorMessage({ key: 'Insufficient BNB balance' })\n    } else if (inputAmount.gt(0) && inputAmount.lt(minBetAmount)) {\n      setErrorMessage({\n        key: 'A minimum amount of %num% %token% is required',\n        data: { num: formatBigNumber(minBetAmount), token: 'BNB' },\n      })\n    } else {\n      setErrorMessage(null)\n    }\n  }, [value, maxBalance, minBetAmount, setErrorMessage])\n\n  return (\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\">\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\n            <ArrowBackIcon width=\"24px\" />\n          </IconButton>\n          <FlexRow>\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\n          </FlexRow>\n          <PositionTag betPosition={position} onClick={togglePosition}>\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n      </CardHeader>\n      <CardBody py=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text textAlign=\"right\" color=\"textSubtle\">\n            {t('Commit')}:\n          </Text>\n          <Flex alignItems=\"center\">\n            <BinanceIcon mr=\"4px  \" />\n            <Text bold textTransform=\"uppercase\">\n              BNB\n            </Text>\n          </Flex>\n        </Flex>\n        <BalanceInput\n          value={value}\n          onUserInput={handleInputChange}\n          isWarning={showFieldWarning}\n          inputProps={{ disabled: !account || isTxPending }}\n        />\n        {showFieldWarning && (\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\n            {t(errorMessage.key, errorMessage.data)}\n          </Text>\n        )}\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\n          {account && t('Balance: %balance%', { balance: balanceDisplay })}\n        </Text>\n        <Slider\n          name=\"balance\"\n          min={0}\n          max={100}\n          value={percent}\n          onValueChanged={handlePercentChange}\n          valueLabel={account ? `${percent.toFixed(percent > 0 ? 1 : 0)}%` : ''}\n          step={0.01}\n          disabled={!account || isTxPending}\n          mb=\"4px\"\n          className={!account || isTxPending ? '' : 'swiper-no-swiping'}\n        />\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          {percentShortcuts.map((percentShortcut) => {\n            const handleClick = () => {\n              handlePercentChange(percentShortcut)\n            }\n\n            return (\n              <Button\n                key={percentShortcut}\n                scale=\"xs\"\n                variant=\"tertiary\"\n                onClick={handleClick}\n                disabled={!account || isTxPending}\n                style={{ flex: 1 }}\n              >\n                {`${percentShortcut}%`}\n              </Button>\n            )\n          })}\n          <Button\n            scale=\"xs\"\n            variant=\"tertiary\"\n            onClick={() => handlePercentChange(100)}\n            disabled={!account || isTxPending}\n          >\n            {t('Max')}\n          </Button>\n        </Flex>\n        <Box mb=\"8px\">\n          {account ? (\n            <Button\n              width=\"100%\"\n              disabled={!account || disabled}\n              onClick={handleEnterPosition}\n              isLoading={isTxPending}\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n            >\n              {t(key)}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Box>\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\n          {t('You won’t be able to remove or change your position once you enter it.')}\n        </Text>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SetPositionCard\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { CardBody, PlayCircleOutlineIcon, Button, useTooltip, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\nimport { useBlock, useGetIntervalBlocks } from 'state/hooks'\nimport { BLOCK_PADDING, fetchLedgerData } from 'state/predictions'\nimport useToast from 'hooks/useToast'\nimport CardFlip from '../CardFlip'\nimport { formatBnbv2 } from '../../helpers'\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport SetPositionCard from './SetPositionCard'\n\ninterface OpenRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\ninterface State {\n  isSettingPosition: boolean\n  position: BetPosition\n}\n\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const [state, setState] = useState<State>({\n    isSettingPosition: false,\n    position: BetPosition.BULL,\n  })\n  const { t } = useTranslation()\n  const interval = useGetIntervalBlocks()\n  const { toastSuccess } = useToast()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { currentBlock } = useBlock()\n  const { isSettingPosition, position } = state\n  const isBufferPhase = currentBlock >= round.startBlock + (interval + BLOCK_PADDING)\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(betAmount)} BNB`}</div>,\n    { placement: 'top' },\n  )\n\n  // Bettable rounds do not have an lockBlock set so we approximate it by adding the block interval\n  // to the start block\n  const estimatedLockBlock = round.startBlock + (interval + BLOCK_PADDING)\n\n  const getCanEnterPosition = () => {\n    if (hasEnteredUp || hasEnteredDown) {\n      return false\n    }\n\n    if (round.lockPrice !== null) {\n      return false\n    }\n\n    return true\n  }\n\n  const canEnterPosition = getCanEnterPosition()\n\n  const handleBack = () =>\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: false,\n    }))\n\n  const handleSetPosition = (newPosition: BetPosition) => {\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: true,\n      position: newPosition,\n    }))\n  }\n\n  const togglePosition = () => {\n    setState((prevState) => ({\n      ...prevState,\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\n    }))\n  }\n\n  const handleSuccess = async () => {\n    await dispatch(fetchLedgerData({ account, epochs: [round.epoch] }))\n\n    handleBack()\n\n    toastSuccess(\n      t('Success!'),\n      t('%position% position entered', {\n        position: positionDisplay,\n      }),\n    )\n  }\n\n  const getPositionEnteredIcon = () => {\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\n  }\n\n  return (\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\n      <Card>\n        <CardHeader\n          status=\"next\"\n          epoch={round.epoch}\n          blockNumber={estimatedLockBlock}\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\n          title={t('Next')}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\n            {canEnterPosition ? (\n              <>\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\n                <Button\n                  variant=\"success\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\n                  mb=\"4px\"\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter UP')}\n                </Button>\n                <Button\n                  variant=\"danger\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter DOWN')}\n                </Button>\n              </>\n            ) : (\n              <>\n                <div ref={targetRef}>\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\n                    {t('%position% Entered', { position: positionDisplay })}\n                  </Button>\n                </div>\n                <PrizePoolRow totalAmount={round.totalAmount} />\n                {tooltipVisible && tooltip}\n              </>\n            )}\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </Card>\n      <SetPositionCard\n        onBack={handleBack}\n        onSuccess={handleSuccess}\n        position={position}\n        togglePosition={togglePosition}\n      />\n    </CardFlip>\n  )\n}\n\nexport default OpenRoundCard\n","import { useEffect, useRef, useState } from 'react'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { simpleRpcProvider } from 'utils/providers'\n\n/**\n * Returns a countdown in seconds of a given block\n */\nconst useBlockCountdown = (blockNumber: number) => {\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\n\n  useEffect(() => {\n    const startCountdown = async () => {\n      const currentBlock = await simpleRpcProvider.getBlockNumber()\n\n      if (blockNumber > currentBlock) {\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME)\n\n        // Clear previous interval\n        if (timer.current) {\n          clearInterval(timer.current)\n        }\n\n        timer.current = setInterval(() => {\n          setSecondsRemaining((prevSecondsRemaining) => {\n            if (prevSecondsRemaining === 1) {\n              clearInterval(timer.current)\n            }\n\n            return prevSecondsRemaining - 1\n          })\n        }, 1000)\n      }\n    }\n\n    startCountdown()\n\n    return () => {\n      clearInterval(timer.current)\n    }\n  }, [setSecondsRemaining, blockNumber, timer])\n\n  return secondsRemaining\n}\n\nexport default useBlockCountdown\n","import { useGetCurrentRoundBlockNumber, useGetIntervalBlocks } from 'state/hooks'\nimport useBlockCountdown from 'hooks/useGetBlockCountdown'\n\n/**\n * Returns a countdown in seconds of a given block\n */\nconst useRoundCountdown = (intervalsToAdd = 1) => {\n  const interval = useGetIntervalBlocks()\n  const currentRoundBlockNum = useGetCurrentRoundBlockNumber()\n  const blocksToAdd = intervalsToAdd * interval\n  const seconds = useBlockCountdown(currentRoundBlockNum + blocksToAdd)\n\n  return seconds\n}\n\nexport default useRoundCountdown\n","import React from 'react'\nimport { CardBody, Text, WaitIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition } from 'state/types'\nimport { useGetCurrentEpoch, useGetTotalIntervalBlocks } from 'state/hooks'\nimport { formatRoundTime } from '../../helpers'\nimport useRoundCountdown from '../../hooks/useRoundCountdown'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface SoonRoundCardProps {\n  round: NodeRound\n}\n\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const currentEpoch = useGetCurrentEpoch()\n  const estimatedEndBlock = round.startBlock + interval\n  const seconds = useRoundCountdown(round.epoch - currentEpoch + 1)\n  const countdown = formatRoundTime(seconds)\n\n  return (\n    <Card>\n      <CardHeader\n        status=\"soon\"\n        icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n        title={t('Later')}\n        epoch={round.epoch}\n        blockNumber={estimatedEndBlock}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Text textAlign=\"center\">\n            <Text bold>{t('Entry starts')}</Text>\n            <Text fontSize=\"24px\" bold>\n              {`~${countdown}`}\n            </Text>\n          </Text>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SoonRoundCard\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetBetByEpoch, useGetCurrentEpoch } from 'state/hooks'\nimport { BetPosition, NodeRound } from 'state/types'\nimport { getMultiplierv2 } from '../../helpers'\nimport ExpiredRoundCard from './ExpiredRoundCard'\nimport LiveRoundCard from './LiveRoundCard'\nimport OpenRoundCard from './OpenRoundCard'\nimport SoonRoundCard from './SoonRoundCard'\n\ninterface RoundCardProps {\n  round: NodeRound\n}\n\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\n  const { epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\n  const currentEpoch = useGetCurrentEpoch()\n  const { account } = useWeb3React()\n  const ledger = useGetBetByEpoch(account, epoch)\n  const hasEntered = ledger ? ledger.amount.gt(0) : false\n  const hasEnteredUp = hasEntered && ledger.position === BetPosition.BULL\n  const hasEnteredDown = hasEntered && ledger.position === BetPosition.BEAR\n  const bullMultiplier = getMultiplierv2(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplierv2(totalAmount, bearAmount)\n\n  const formattedBullMultiplier = bullMultiplier.toUnsafeFloat().toFixed(bullMultiplier.isZero() ? 0 : 2)\n  const formattedbearMultiplier = bearMultiplier.toUnsafeFloat().toFixed(bearMultiplier.isZero() ? 0 : 2)\n\n  // Next (open) round\n  if (epoch === currentEpoch && lockPrice === null) {\n    return (\n      <OpenRoundCard\n        round={round}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        betAmount={ledger?.amount}\n        bullMultiplier={formattedBullMultiplier}\n        bearMultiplier={formattedbearMultiplier}\n      />\n    )\n  }\n\n  // Live round\n  if (closePrice === null && epoch === currentEpoch - 1) {\n    return (\n      <LiveRoundCard\n        betAmount={ledger?.amount}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        round={round}\n        bullMultiplier={formattedBullMultiplier}\n        bearMultiplier={formattedbearMultiplier}\n      />\n    )\n  }\n\n  // Fake future rounds\n  if (epoch > currentEpoch) {\n    return <SoonRoundCard round={round} />\n  }\n\n  // Past rounds\n  return (\n    <ExpiredRoundCard\n      round={round}\n      hasEnteredDown={hasEnteredDown}\n      hasEnteredUp={hasEnteredUp}\n      betAmount={ledger?.amount}\n      bullMultiplier={formattedBullMultiplier}\n      bearMultiplier={formattedbearMultiplier}\n    />\n  )\n}\n\nexport default RoundCard\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport styled from 'styled-components'\nimport { BnbUsdtPairTokenIcon, Box, Card, PocketWatchIcon, Text } from '@pancakeswap/uikit'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport { useGetLastOraclePrice } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatRoundTime } from '../helpers'\nimport useRoundCountdown from '../hooks/useRoundCountdown'\n\nconst Token = styled(Box)`\n  margin-top: -24px;\n  position: absolute;\n  top: 50%;\n  z-index: 30;\n\n  & > svg {\n    height: 48px;\n    width: 48px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-top: -32px;\n\n    & > svg {\n      height: 64px;\n      width: 64px;\n    }\n  }\n`\n\nconst Title = styled(Text)`\n  font-size: 16px;\n  line-height: 21px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 20px;\n    line-height: 22px;\n  }\n`\n\nconst Price = styled(Text)`\n  height: 18px;\n  justify-self: start;\n  width: 70px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n  }\n`\n\nconst Interval = styled(Text)`\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n    width: 32px;\n  }\n`\n\nconst Label = styled(Card)<{ dir: 'left' | 'right' }>`\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\n  display: flex;\n  flex-direction: column;\n  overflow: initial;\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    align-items: center;\n    border-radius: 16px;\n    flex-direction: row;\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\n  }\n`\n\nexport const PricePairLabel: React.FC = () => {\n  const price = useGetLastOraclePrice()\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: priceAsNumber,\n    duration: 1,\n    decimals: 3,\n  })\n\n  const updateRef = useRef(update)\n\n  useEffect(() => {\n    updateRef.current(priceAsNumber)\n  }, [priceAsNumber, updateRef])\n\n  return (\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\n      <Token left={0}>\n        <BnbUsdtPairTokenIcon />\n      </Token>\n      <Label dir=\"left\">\n        <Title bold textTransform=\"uppercase\">\n          BNBUSDT\n        </Title>\n        <Price fontSize=\"12px\">{`$${countUp}`}</Price>\n      </Label>\n    </Box>\n  )\n}\n\ninterface TimerLabelProps {\n  interval: string\n  unit: 'm' | 'h' | 'd'\n}\n\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval, unit }) => {\n  const seconds = useRoundCountdown()\n  const countdown = formatRoundTime(seconds)\n  const { t } = useTranslation()\n\n  return (\n    <Box pr=\"24px\" position=\"relative\">\n      <Label dir=\"right\">\n        <Title bold color=\"secondary\">\n          {seconds === 0 ? t('Closing') : countdown}\n        </Title>\n        <Interval fontSize=\"12px\">{`${interval}${t(unit)}`}</Interval>\n      </Label>\n      <Token right={0}>\n        <PocketWatchIcon />\n      </Token>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Card, IconButton } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\nimport useSwiper from '../hooks/useSwiper'\n\nconst StyledPrevNextNav = styled(Card)`\n  align-items: center;\n  display: none;\n  justify-content: space-between;\n  overflow: initial;\n  position: relative;\n  width: 128px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n  }\n`\n\nconst Icon = styled.div`\n  cursor: pointer;\n  left: 50%;\n  margin-left: -32px;\n  position: absolute;\n`\n\nconst PrevNextNav = () => {\n  const { swiper } = useSwiper()\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n\n  const handlePrevSlide = () => {\n    swiper.slidePrev()\n  }\n\n  const handleNextSlide = () => {\n    swiper.slideNext()\n  }\n\n  const handleSlideToLive = () => {\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n    swiper.slideTo(currentEpochIndex - 1)\n    swiper.update()\n  }\n\n  return (\n    <StyledPrevNextNav>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n      <Icon onClick={handleSlideToLive}>\n        <BunnyCardsIcon width=\"64px\" />\n      </Icon>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n    </StyledPrevNextNav>\n  )\n}\n\nexport default PrevNextNav\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { AutoRenewIcon, HistoryIcon, IconButton } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport { useGetIsFetchingHistory } from 'state/hooks'\n\nconst HistoryButton = () => {\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <IconButton variant=\"subtle\" ml=\"8px\" onClick={handleClick} isLoading={isFetchingHistory} disabled={!account}>\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\n    </IconButton>\n  )\n}\n\nexport default HistoryButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, HelpIcon, IconButton } from '@pancakeswap/uikit'\nimport FlexRow from './FlexRow'\nimport { PricePairLabel, TimerLabel } from './Label'\nimport PrevNextNav from './PrevNextNav'\nimport HistoryButton from './HistoryButton'\n\nconst SetCol = styled.div`\n  flex: none;\n  width: auto;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    width: 270px;\n  }\n`\n\nconst HelpButtonWrapper = styled.div`\n  order: 1;\n  margin: 0 8px 0 0;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 2;\n    margin: 0 0 0 8px;\n  }\n`\n\nconst TimerLabelWrapper = styled.div`\n  order: 2;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 1;\n  }\n`\n\nconst HistoryButtonWrapper = styled.div`\n  display: none;\n  order: 3;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: initial;\n  }\n`\n\nconst Menu = () => {\n  return (\n    <FlexRow alignItems=\"center\" p=\"16px\">\n      <SetCol>\n        <PricePairLabel />\n      </SetCol>\n      <FlexRow justifyContent=\"center\">\n        <PrevNextNav />\n      </FlexRow>\n      <SetCol>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <TimerLabelWrapper>\n            <TimerLabel interval=\"5\" unit=\"m\" />\n          </TimerLabelWrapper>\n          <HelpButtonWrapper>\n            <IconButton\n              variant=\"subtle\"\n              as=\"a\"\n              href=\"https://docs.pancakeswap.finance/products/prediction\"\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n            >\n              <HelpIcon width=\"24px\" color=\"white\" />\n            </IconButton>\n          </HelpButtonWrapper>\n          <HistoryButtonWrapper>\n            <HistoryButton />\n          </HistoryButtonWrapper>\n        </Flex>\n      </SetCol>\n    </FlexRow>\n  )\n}\n\nexport default Menu\n","import { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\nimport useSwiper from './useSwiper'\n\n/**\n * Hooks for actions to be performed when the round changes\n */\nconst useOnNextRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  const { account } = useWeb3React()\n  const previousEpoch = usePreviousValue(currentEpoch)\n  const { swiper } = useSwiper()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n      // Slide to the current LIVE round which is always the one before the current round\n      swiper.slideTo(currentEpochIndex - 1)\n      swiper.update()\n    }\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\n}\n\nexport default useOnNextRound\n","import React from 'react'\nimport styled from 'styled-components'\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\nimport { Swiper, SwiperSlide } from 'swiper/react'\nimport { Box } from '@pancakeswap/uikit'\nimport { useGetSortedRounds } from 'state/hooks'\nimport 'swiper/swiper.min.css'\nimport RoundCard from './components/RoundCard'\nimport Menu from './components/Menu'\nimport useSwiper from './hooks/useSwiper'\nimport useOnNextRound from './hooks/useOnNextRound'\n\nSwiperCore.use([Keyboard, Mousewheel])\n\nconst StyledSwiper = styled.div`\n  .swiper-wrapper {\n    align-items: center;\n    display: flex;\n  }\n\n  .swiper-slide {\n    width: 320px;\n  }\n`\nconst Positions: React.FC = () => {\n  const { setSwiper } = useSwiper()\n  const rounds = useGetSortedRounds()\n  const initialIndex = Math.floor(rounds.length / 2)\n\n  useOnNextRound()\n\n  return (\n    <Box overflow=\"hidden\">\n      <Menu />\n      <StyledSwiper>\n        <Swiper\n          initialSlide={initialIndex}\n          onSwiper={setSwiper}\n          spaceBetween={16}\n          slidesPerView=\"auto\"\n          freeMode\n          freeModeSticky\n          centeredSlides\n          freeModeMomentumRatio={0.25}\n          freeModeMomentumVelocityRatio={0.5}\n          mousewheel\n          keyboard\n          resizeObserver\n        >\n          {rounds.map((round) => (\n            <SwiperSlide key={round.epoch}>\n              <RoundCard round={round} />\n            </SwiperSlide>\n          ))}\n        </Swiper>\n      </StyledSwiper>\n    </Box>\n  )\n}\n\nexport default Positions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex } from '@pancakeswap/uikit'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { PredictionStatus } from 'state/types'\nimport MobileMenu from './components/MobileMenu'\nimport History from './History'\nimport Positions from './Positions'\nimport Chart from './Chart'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\n\nenum PageView {\n  POSITIONS = 'positions',\n  HISTORY = 'history',\n  CHART = 'chart',\n}\n\nconst StyledMobile = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  max-height: 100%;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    display: none;\n  }\n`\n\nconst View = styled.div<{ isVisible: boolean }>`\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\n`\n\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\n  if (isHistoryPaneOpen) {\n    return PageView.HISTORY\n  }\n\n  if (isChartPaneOpen) {\n    return PageView.CHART\n  }\n\n  return PageView.POSITIONS\n}\n\nconst Mobile: React.FC = () => {\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\n  const status = useGetPredictionsStatus()\n\n  return (\n    <StyledMobile>\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\n        <View isVisible={view === PageView.POSITIONS}>\n          <Flex alignItems=\"center\" height=\"100%\">\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && <Positions />}\n          </Flex>\n        </View>\n        <View isVisible={view === PageView.CHART}>\n          <Chart />\n        </View>\n        <View isVisible={view === PageView.HISTORY}>\n          <History />\n        </View>\n      </Box>\n      <MobileMenu />\n    </StyledMobile>\n  )\n}\n\nexport default Mobile\n","import React, { useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport Split from 'split-grid'\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap/uikit'\nimport debounce from 'lodash/debounce'\nimport delay from 'lodash/delay'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { setChartPaneState } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport TradingView from './components/TradingView'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\nimport History from './History'\nimport Positions from './Positions'\n\n// The value to set the chart when the user clicks the chart tab at the bottom\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\n\nconst ExpandChartButton = styled(Button)`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n  bottom: 12px;\n  color: ${({ theme }) => theme.colors.text};\n  display: none;\n  left: 32px;\n  position: absolute;\n  z-index: 50;\n\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\n    background-color: ${({ theme }) => theme.card.background};\n    opacity: 1;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: inline-flex;\n  }\n`\n\nconst SplitWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 12px 0;\n  flex: 1;\n  overflow: hidden;\n`\n\nconst ChartPane = styled.div`\n  overflow: hidden;\n  position: relative;\n`\n\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\n  flex: none;\n  overflow: hidden;\n  transition: width 200ms ease-in-out;\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\n`\n\nconst StyledDesktop = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n    height: 100%;\n  }\n`\n\nconst PositionPane = styled.div`\n  align-items: center;\n  display: flex;\n  max-width: 100%;\n  overflow-y: auto;\n  overflow-x: hidden;\n\n  & > div {\n    flex: 1;\n    overflow: hidden;\n  }\n`\n\nconst Gutter = styled.div`\n  background: ${({ theme }) => theme.colors.dropdown};\n  cursor: row-resize;\n  height: 12px;\n  position: relative;\n\n  &:before {\n    background-color: ${({ theme }) => theme.colors.textSubtle};\n    border-radius: 8px;\n    content: '';\n    height: 4px;\n    left: 50%;\n    margin-left: -32px;\n    position: absolute;\n    top: 4px;\n    width: 64px;\n  }\n`\n\nconst Desktop: React.FC = () => {\n  const splitWrapperRef = useRef<HTMLDivElement>()\n  const chartRef = useRef<HTMLDivElement>()\n  const gutterRef = useRef<HTMLDivElement>()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n  const status = useGetPredictionsStatus()\n\n  const toggleChartPane = () => {\n    const newChartPaneState = !isChartPaneOpen\n\n    if (newChartPaneState) {\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\n\n      // Purely comedic: We only want to animate if we are clicking the open chart button\n      // If we keep the transition on the resizing becomes very choppy\n      delay(() => {\n        splitWrapperRef.current.style.transition = ''\n      }, 150)\n    }\n\n    dispatch(setChartPaneState(newChartPaneState))\n  }\n\n  useEffect(() => {\n    const threshold = 100\n    const handleDrag = debounce(() => {\n      const { height } = chartRef.current.getBoundingClientRect()\n\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\n      dispatch(setChartPaneState(height > threshold))\n    }, 50)\n\n    const split = Split({\n      dragInterval: 1,\n      snapOffset: threshold,\n      onDrag: handleDrag,\n      rowGutters: [\n        {\n          track: 1,\n          element: gutterRef.current,\n        },\n      ],\n    })\n\n    return () => {\n      split.destroy()\n    }\n  }, [gutterRef, chartRef, dispatch])\n\n  return (\n    <>\n      {!isChartPaneOpen && (\n        <ExpandChartButton\n          variant=\"tertiary\"\n          scale=\"sm\"\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\n          onClick={toggleChartPane}\n        >\n          {isChartPaneOpen ? t('Close') : t('Charts')}\n        </ExpandChartButton>\n      )}\n      <StyledDesktop>\n        <SplitWrapper ref={splitWrapperRef}>\n          <PositionPane>\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && (\n              <div>\n                <Positions />\n              </div>\n            )}\n          </PositionPane>\n          <Gutter ref={gutterRef} />\n          <ChartPane ref={chartRef}>\n            <TradingView />\n          </ChartPane>\n        </SplitWrapper>\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\n          <History />\n        </HistoryPane>\n      </StyledDesktop>\n    </>\n  )\n}\n\nexport default Desktop\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  ButtonMenu,\n  ButtonMenuItem,\n  Cards,\n  ChartIcon,\n  HistoryIcon,\n  IconButton,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { PredictionStatus } from 'state/types'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\nimport useSwiper from '../hooks/useSwiper'\n\nconst ButtonNav = styled.div`\n  flex: none;\n`\n\nconst TabNav = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nconst StyledMobileMenu = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex: none;\n  height: 64px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\n  if (isHistoryOpen) {\n    return 2\n  }\n\n  if (isChartOpen) {\n    return 1\n  }\n\n  return 0\n}\n\nconst MobileMenu = () => {\n  const { swiper } = useSwiper()\n  const isHistoryOpen = useIsHistoryPaneOpen()\n  const isChartOpen = useIsChartPaneOpen()\n  const status = useGetPredictionsStatus()\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleItemClick = (index: number) => {\n    switch (index) {\n      case 2:\n        dispatch(setHistoryPaneState(true))\n        break\n      case 1:\n        dispatch(setChartPaneState(true))\n        dispatch(setHistoryPaneState(false))\n        break\n      case 0:\n      default:\n        dispatch(setHistoryPaneState(false))\n        dispatch(setChartPaneState(false))\n    }\n  }\n\n  return (\n    <StyledMobileMenu>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n      <TabNav>\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\n          <ButtonMenuItem>\n            <Cards color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem>\n            <ChartIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem disabled={!account}>\n            <HistoryIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </TabNav>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n    </StyledMobileMenu>\n  )\n}\n\nexport default MobileMenu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\nimport Menu from './components/Menu'\nimport TradingView from './components/TradingView'\n\nconst MenuWrapper = styled.div`\n  flex: none;\n`\n\nconst ChartWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n`\n\nconst Chart = () => {\n  return (\n    <Flex flexDirection=\"column\" height=\"100%\">\n      <MenuWrapper>\n        <Menu />\n      </MenuWrapper>\n      <ChartWrapper>\n        <TradingView />\n      </ChartWrapper>\n    </Flex>\n  )\n}\n\nexport default Chart\n","import React, { useState } from 'react'\nimport {\n  ModalContainer,\n  ModalBody,\n  Text,\n  Button,\n  Flex,\n  InjectedModalProps,\n  Checkbox,\n  ModalHeader,\n  ModalTitle,\n  Heading,\n  Box,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\n\ninterface RiskDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst GradientModalHeader = styled(ModalHeader)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  padding-bottom: 24px;\n  padding-top: 24px;\n`\n\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\n  const { t } = useTranslation()\n\n  const handleSetAcknowledgeRisk = () => {\n    setAcknowledgeRisk(!acknowledgeRisk)\n  }\n\n  const handleSetAcknowledgeBeta = () => {\n    setAcknowledgeBeta(!acknowledgeBeta)\n  }\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\n      <GradientModalHeader>\n        <ModalTitle>\n          <Heading scale=\"lg\">{t('Welcome!')}</Heading>\n        </ModalTitle>\n      </GradientModalHeader>\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\n          <Heading as=\"h3\" mb=\"24px\">\n            {t('This Product is in beta.')}\n          </Heading>\n\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\n          </Text>\n\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={acknowledgeRisk} onChange={handleSetAcknowledgeRisk} />\n              </div>\n              <Text ml=\"8px\">\n                {t(\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\n                )}\n              </Text>\n            </Flex>\n          </label>\n          <label htmlFor=\"checkbox1\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox1\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\n              </div>\n              <Text ml=\"8px\">\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\n              </Text>\n            </Flex>\n          </label>\n        </Box>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!acknowledgeRisk || !acknowledgeBeta}>\n          {t('Continue')}\n        </Button>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default RiskDisclaimer\n","import React from 'react'\nimport { ModalContainer, ModalBody, Text, Button, InjectedModalProps, LinkExternal, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ChartDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst ChartDisclaimer: React.FC<ChartDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const { t } = useTranslation()\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Text as=\"p\" mb=\"16px\">\n          {t('Charts are provided for reference only and do not reflect rounds’ final outcome.')}\n        </Text>\n        <Text as=\"p\" mb=\"16px\">\n          {t('Please refer to the prices shown on the cards for the final outcome.')}\n        </Text>\n        <Button width=\"100%\" onClick={handleConfirm} mb=\"16px\">\n          {t('I understand')}\n        </Button>\n        <Flex justifyContent=\"center\" alignItems=\"center\">\n          <LinkExternal\n            href=\"https://docs.pancakeswap.finance/products/prediction/prediction-faq#what-are-you-using-for-your-price-feed\"\n            external\n          >\n            {t('Learn More')}\n          </LinkExternal>\n        </Flex>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default ChartDisclaimer\n","import React, { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Helmet } from 'react-helmet-async'\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useInitialBlock, useIsChartPaneOpen } from 'state/hooks'\nimport { initializePredictions } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport usePersistState from 'hooks/usePersistState'\nimport PageLoader from 'components/Loader/PageLoader'\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\nimport usePollPredictions from './hooks/usePollPredictions'\nimport Container from './components/Container'\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\nimport SwiperProvider from './context/SwiperProvider'\nimport Desktop from './Desktop'\nimport Mobile from './Mobile'\nimport RiskDisclaimer from './components/RiskDisclaimer'\nimport ChartDisclaimer from './components/ChartDisclaimer'\n\nconst Predictions = () => {\n  const { isXl } = useMatchBreakpoints()\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, {\n    localStorageKey: 'pancake_predictions_accepted_risk',\n  })\n  const [hasAcceptedChart, setHasAcceptedChart] = usePersistState(false, {\n    localStorageKey: 'pancake_predictions_chart',\n  })\n  const { account } = useWeb3React()\n  const status = useGetPredictionsStatus()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const initialBlock = useInitialBlock()\n  const isDesktop = isXl\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\n  const handleAcceptChart = () => setHasAcceptedChart(true)\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer onSuccess={handleAcceptChart} />, false)\n\n  // TODO: memoize modal's handlers\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\n\n  // Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedRisk) {\n      onPresentRiskDisclaimerRef.current()\n    }\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\n\n  // Chart Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedChart && isChartPaneOpen) {\n      onPresentChartDisclaimerRef.current()\n    }\n  }, [onPresentChartDisclaimerRef, hasAcceptedChart, isChartPaneOpen])\n\n  useEffect(() => {\n    if (initialBlock > 0) {\n      // Do not start initialization until the first block has been retrieved\n      dispatch(initializePredictions(account))\n    }\n  }, [initialBlock, dispatch, account])\n\n  usePollPredictions()\n  usePollOraclePrice()\n\n  if (status === PredictionStatus.INITIAL) {\n    return <PageLoader />\n  }\n\n  return (\n    <>\n      <Helmet>\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\n      </Helmet>\n      <SwiperProvider>\n        <Container>\n          {isDesktop ? <Desktop /> : <Mobile />}\n          <CollectWinningsPopup />\n        </Container>\n      </SwiperProvider>\n    </>\n  )\n}\n\nexport default Predictions\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { simpleRpcProvider } from 'utils/providers'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.balanceOf(account)\n        setBalanceState({ balance: new BigNumber(res.toString()), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.totalSupply()\n      setTotalSupply(new BigNumber(supply.toString()))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      const res = await contract.balanceOf('0x000000000000000000000000000000000000dEaD')\n      setBalance(new BigNumber(res.toString()))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await simpleRpcProvider.getBalance(account)\n      setBalance(new BigNumber(walletBalance.toString()))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n"],"sourceRoot":""}