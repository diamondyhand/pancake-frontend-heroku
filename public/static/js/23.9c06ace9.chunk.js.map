{"version":3,"sources":["views/Collectibles/components/InfoRow.tsx","views/Collectibles/components/TransferNftModal.tsx","views/Collectibles/components/ClaimNftModal.tsx","views/Collectibles/components/NftCard/Preview.tsx","views/Collectibles/components/NftCard/index.tsx","views/Collectibles/components/NftGrid.tsx","views/Collectibles/components/NftCard/EasterNftCard.tsx","views/Collectibles/components/NftList.tsx","views/Collectibles/components/NftCard/BunnySpecialCakeVaultCard.tsx","views/Collectibles/components/NftCard/BunnySpeciaPredictionCard.tsx","views/Collectibles/index.tsx"],"names":["InfoRow","styled","div","Value","Text","ModalContent","Actions","Label","label","theme","colors","text","TransferNftModal","nft","tokenIds","onSuccess","onDismiss","useState","isLoading","setIsLoading","value","setValue","error","setError","t","useTranslation","account","useWeb3React","contract","useERC721","getAddressByType","type","toastSuccess","useToast","handleConfirm","a","ethers","utils","isAddress","transferFrom","tx","wait","status","console","title","color","mb","nftName","name","htmlFor","id","placeholder","onChange","evt","inputValue","target","isWarning","disabled","width","variant","onClick","ClaimNftModal","onClaim","isConfirming","setIsConfirming","toastError","alignItems","justifyContent","bold","endIcon","spin","Container","cardBorder","StyledImage","img","StyledVideo","video","Preview","isOwned","images","previewImageSrc","lg","videoComponent","autoPlay","controls","loop","muted","poster","src","webm","mp4","href","ipfs","rel","previewImage","alt","Header","DetailsButton","Button","attrs","InfoBlock","NftCard","canClaim","refresh","isOpen","setIsOpen","profile","useProfile","identifier","description","walletOwnsNft","length","Icon","ChevronUpIcon","ChevronDownIcon","handleClick","handleSuccess","useModal","onPresentTransferModal","onPresentClaimModal","isActive","outline","mt","p","as","style","textAlign","NftGrid","mediaQueries","sm","md","teamNftMap","EasterNftCard","props","isClaimable","setIsClaimable","team","easterNftContract","useEasterNftContract","handleClaim","mintNFT","response","useEffect","fetchClaimStatus","nftComponents","bunnySpecialCakeVaultContract","useSpecialBunnyCakeVaultContract","variationId","getBunnySpecialCakeVaultContract","claire","bunnySpecialPredictionContract","useSpecialBunnyPredictionContract","getBunnySpecialPredictionContract","NftList","useGetCollectibles","dispatch","useAppDispatch","handleRefresh","fetchWalletNfts","orderBy","nfts","map","Card","StyledHero","textSubtle","Collectibles","Page","scale"],"mappings":"iTAQeA,EANCC,IAAOC,IAAG,yG,yCCiBpBC,EAAQF,YAAOG,KAAPH,CAAY,iDAIpBI,EAAeJ,IAAOC,IAAG,oDAIzBI,EAAUL,IAAOC,IAAG,0GAMpBK,EAAQN,IAAOO,MAAK,0GACf,YAAQ,SAALC,MAAkBC,OAAOC,QAgFxBC,EA1E2C,SAAH,GAAiD,IAA3CC,EAAG,EAAHA,IAAKC,EAAQ,EAARA,SAAUC,EAAS,EAATA,UAAWC,EAAS,EAATA,UACrF,EAAkCC,oBAAS,GAAM,mBAA1CC,EAAS,KAAEC,EAAY,KAC9B,EAA0BF,mBAAS,IAAG,mBAA/BG,EAAK,KAAEC,EAAQ,KACtB,EAA0BJ,mBAAS,MAAK,mBAAjCK,EAAK,KAAEC,EAAQ,KACdC,EAAMC,cAAND,EACAE,EAAYC,cAAZD,QACFE,EAAWC,YAAUC,YAAiBjB,EAAIkB,OACxCC,EAAiBC,cAAjBD,aAEFE,EAAa,uCAAG,4BAAAC,EAAA,sDAEkC,GAFlC,SAEKC,IAAOC,MAAMC,UAAUlB,GAE1B,CAAD,eACjBG,EAASC,EAAE,wCAAuC,uCAEjCI,EAASW,aAAab,EAASN,EAAON,EAAS,IAAG,OACjD,OADZ0B,EAAE,OACRrB,GAAa,GAAK,UACIqB,EAAGC,OAAM,QAAlB,OACDC,QACV1B,IACAD,IACAiB,EAAaR,EAAE,oCAEfD,EAASC,EAAE,2BACXL,GAAa,IACd,0DAGHwB,QAAQrB,MAAM,0BAA0B,EAAD,IAAM,0DAEhD,kBAtBkB,mCA6BnB,OACE,eAAC,KAAK,CAACsB,MAAOpB,EAAE,gBAAiBR,UAAWA,EAAU,UACpD,eAACX,EAAY,WACViB,GACC,cAAC,KAAI,CAACuB,MAAM,UAAUC,GAAG,MAAK,SAC3BxB,IAGL,eAAC,EAAO,WACN,eAAC,KAAI,WAAEE,EAAE,gBAAe,OACxB,cAACrB,EAAK,UAAEqB,EAAE,mBAAoB,CAAEuB,QAASlC,EAAImC,YAE/C,eAACzC,EAAK,CAAC0C,QAAQ,kBAAiB,UAAEzB,EAAE,qBAAoB,OACxD,cAAC,KAAK,CACJ0B,GAAG,kBACHF,KAAK,UACLjB,KAAK,OACLoB,YAAa3B,EAAE,iBACfJ,MAAOA,EACPgC,SAxBa,SAACC,GACpB,IAAeC,EAAeD,EAAIE,OAA1BnC,MACRC,EAASiC,IAuBHE,UAAWlC,EACXmC,SAAUvC,OAGd,eAACZ,EAAO,WACN,cAAC,IAAM,CAACoD,MAAM,OAAOC,QAAQ,YAAYC,QAAS5C,EAAU,SACzDQ,EAAE,YAEL,cAAC,IAAM,CAACkC,MAAM,OAAOE,QAAS1B,EAAeuB,UAAW/B,GAAWR,IAAcE,EAAM,SACpFI,EAAE,oBC5FPnB,EAAeJ,IAAOC,IAAG,oDAIzBI,EAAUL,IAAOC,IAAG,0GAoDX2D,EA9CqC,SAAH,GAAgD,IAA1ChD,EAAG,EAAHA,IAAKE,EAAS,EAATA,UAAW+C,EAAO,EAAPA,QAAS9C,EAAS,EAATA,UAC9E,EAAwCC,oBAAS,GAAM,mBAAhD8C,EAAY,KAAEC,EAAe,KAC5BxC,EAAMC,cAAND,EACAE,EAAYC,cAAZD,QACR,EAAqCO,cAA7BgC,EAAU,EAAVA,WAAYjC,EAAY,EAAZA,aAEdE,EAAa,uCAAG,4BAAAC,EAAA,sEACH2B,IAAS,OACL,OADftB,EAAE,OACRwB,GAAgB,GAAK,SACCxB,EAAGC,OAAM,OAAlB,OACDC,QACVV,EAAaR,EAAE,0BACfR,IACAD,MAEAkD,EAAWzC,EAAE,SAAUA,EAAE,uFACzBwC,GAAgB,IACjB,2CACF,kBAZkB,mCAcnB,OACE,eAAC,KAAK,CAACpB,MAAOpB,EAAE,qBAAsBR,UAAWA,EAAU,UACzD,cAAC,EAAY,UACX,eAAC,IAAI,CAACkD,WAAW,SAASpB,GAAG,MAAMqB,eAAe,gBAAe,UAC/D,eAAC,KAAI,WAAE3C,EAAE,oBAAmB,OAC5B,cAAC,KAAI,CAAC4C,MAAI,WAAE5C,EAAE,2BAA4B,CAAEuB,QAASlC,EAAImC,cAG7D,eAAC,EAAO,WACN,cAAC,IAAM,CAACU,MAAM,OAAOC,QAAQ,YAAYC,QAAS5C,EAAU,SACzDQ,EAAE,YAEL,cAAC,IAAM,CACLkC,MAAM,OACNE,QAAS1B,EACTuB,UAAW/B,EACXR,UAAW6C,EACXM,QAASN,EAAe,cAAC,IAAa,CAAClB,MAAM,eAAeyB,MAAI,IAAM,KAAK,SAE1E9C,EAAE,oBCvDP+C,EAAYtE,IAAOC,IAAG,2IACN,YAAQ,SAALO,MAAkBC,OAAO8D,cAO5CC,EAAcxE,IAAOyE,IAAG,oMAWxBC,EAAc1E,IAAO2E,MAAK,6DAyCjBC,EApCyB,SAAH,GAAkC,IAA5BhE,EAAG,EAAHA,IAAI,EAAD,EAAEiE,eAAO,OAAQ,EACrDC,EAAwBlE,EAAxBkE,OAAQ/B,EAAgBnC,EAAhBmC,KAAM4B,EAAU/D,EAAV+D,MAChBI,EAAe,uBAAmBD,EAAOE,IAE/C,GAAIL,EAAO,CACT,IAAMM,EACJ,eAACP,EAAW,CAACQ,UAAQ,EAACC,UAAU,EAAOC,MAAI,EAACC,OAAK,EAACC,OAAQP,EAAgB,UACxE,wBAAQQ,IAAKZ,EAAMa,KAAM1D,KAAK,eAC9B,wBAAQyD,IAAKZ,EAAMc,IAAK3D,KAAK,iBAIjC,OAAO+C,EACL,mBAAGa,KAAMZ,EAAOa,KAAMrC,OAAO,SAASsC,IAAI,sBAAqB,SAC5DX,IAGHA,EAIJ,IAAMY,EAAe,cAACrB,EAAW,CAACe,IAAKR,EAAiBe,IAAK/C,IAE7D,OACE,cAACuB,EAAS,UACPO,EACC,mBAAGa,KAAMZ,EAAOa,KAAMrC,OAAO,SAASsC,IAAI,sBAAqB,SAC5DC,IAGHA,KChCFE,EAAS/F,YAAOD,EAAPC,CAAe,iDAIxBgG,GAAgBhG,YAAOiG,KAAQC,MAAM,CAAExC,QAAS,QAAhC1D,CAAyC,gNAazDmG,GAAYnG,IAAOC,IAAG,8CAqEbmG,GAjEyB,SAAH,GAAoE,IAAD,EAA7DxF,EAAG,EAAHA,IAAI,EAAD,EAAEyF,gBAAQ,OAAQ,MAAExF,gBAAQ,MAAG,GAAE,EAAEgD,EAAO,EAAPA,QAASyC,EAAO,EAAPA,QACxF,EAA4BtF,oBAAS,GAAM,mBAApCuF,EAAM,KAAEC,EAAS,KAChBjF,EAAMC,cAAND,EACAkF,EAAYC,cAAZD,QACAE,EAAkC/F,EAAlC+F,WAAY5D,EAAsBnC,EAAtBmC,KAAM6D,EAAgBhG,EAAhBgG,YACpBC,EAAgBhG,EAASiG,OAAS,EAClCC,EAAOR,EAASS,IAAgBC,IAEhCC,EAAW,uCAAG,sBAAAhF,EAAA,sDAClBsE,GAAWD,GAAO,2CACnB,kBAFgB,mCAIXY,EAAgB,WACpBb,KAGF,EAAiCc,aAC/B,cAAC,EAAgB,CAACxG,IAAKA,EAAKC,SAAUA,EAAUC,UAAWqG,KADtDE,EAEN,iBAF4B,GAG7B,EAA8BD,aAAS,cAAC,EAAa,CAACxG,IAAKA,EAAKE,UAAWqG,EAAetD,QAASA,KAA5FyD,EAAwG,iBAArF,GAE1B,OACE,eAAC,IAAI,CAACC,SAAUV,EAAc,UAC5B,cAAC,EAAO,CAACjG,IAAKA,EAAKiE,QAASgC,IAC5B,eAAC,IAAQ,WACP,eAACd,EAAM,WACL,cAAC,IAAO,UAAEhD,IACT8D,GACC,cAAC,KAAG,CAACW,SAAO,EAAC9D,QAAQ,YAAW,SAC7BnC,EAAE,gBAGC,OAAPkF,QAAO,IAAPA,GAAY,QAAL,EAAPA,EAAS7F,WAAG,WAAL,EAAP,EAAc+F,cAAeA,GAC5B,cAAC,KAAG,CAACa,SAAO,EAAC9D,QAAQ,UAAS,SAC3BnC,EAAE,oBAIR8E,GACC,cAAC,IAAM,CAAC5C,MAAM,OAAOgE,GAAG,OAAO9D,QAAS2D,EAAoB,SACzD/F,EAAE,oBAGNsF,GACC,cAAC,IAAM,CAACpD,MAAM,OAAOC,QAAQ,YAAY+D,GAAG,OAAO9D,QAAS0D,EAAuB,SAChF9F,EAAE,iBAIT,eAAC,IAAU,CAACmG,EAAE,IAAG,UACf,cAAC1B,GAAa,CAACvC,MAAM,OAAOW,QAAS,cAAC2C,EAAI,CAACtD,MAAM,OAAOb,MAAM,YAAce,QAASuD,EAAY,SAC9F3F,EAAE,aAEJgF,GACC,cAACJ,GAAS,UACR,cAAC,KAAI,CAACwB,GAAG,IAAI/E,MAAM,aAAagF,MAAO,CAAEC,UAAW,UAAW,SAC5DtG,EAAEqF,cC1FFkB,GAhBC9H,IAAOC,IAAG,uQAOtB,YAAQ,SAALO,MAAkBuH,aAAaC,MAIlC,YAAQ,SAALxH,MAAkBuH,aAAaE,M,4BCFzBC,GAAa,CACxB,eAAgB,EAChB,iBAAkB,EAClB,eAAgB,GAiCHC,GA9B+B,SAAH,GAA2B,IAArBvH,EAAG,EAAHA,IAAQwH,EAAK,mBAC5D,EAAsCpH,oBAAS,GAAM,mBAA9CqH,EAAW,KAAEC,EAAc,KAC1B7G,EAAYC,cAAZD,QACAgF,EAAYC,cAAZD,QACAE,EAAe/F,EAAf+F,WACA4B,GAAgB,OAAP9B,QAAO,IAAPA,IAAW,IAApB8B,KACFC,EAAoBC,cAEpBC,EAAW,uCAAG,4BAAAxG,EAAA,sEAC2CsG,EAAkBG,UAAS,OAApC,OAA9CC,EAA8C,gBAC9CA,EAASpG,OAAM,gCACdoG,GAAQ,2CAChB,kBAJgB,mCAmBjB,OAbAC,qBAAU,WAQJpH,GAAW8G,GAPO,uCAAG,4BAAArG,EAAA,sEACAsG,EAAkBnC,SAAS5E,GAAQ,OAApD4E,EAAQ,OAGdiC,IAAejC,GAAWkC,EAAKtF,KAAOiF,GAAWvB,IAAoB,2CACtE,kBALqB,kCAQpBmC,KAED,CAACrH,EAASkF,EAAY4B,EAAMC,EAAmBF,IAE3C,cAAC,GAAO,2BAAC1H,IAAKA,GAASwH,GAAK,IAAE/B,SAAUgC,EAAaxE,QAAS6E,M,+BC1BjEK,GAAgB,CACpB,eAAgBZ,GAChB,iBAAkBA,GAClB,eAAgBA,GAChB,aCfwD,SAAH,GAA2B,IAArBvH,EAAG,EAAHA,IAAQwH,EAAK,mBACxE,EAAsCpH,oBAAS,GAAM,mBAA9CqH,EAAW,KAAEC,EAAc,KAC1B7G,EAAYC,cAAZD,QACFuH,EAAgCC,cAC9BC,EAAgBtI,EAAhBsI,YAEFR,EAAW,uCAAG,4BAAAxG,EAAA,sEAC2C8G,EAA8BL,UAAS,OAAhD,OAA9CC,EAA8C,gBAC9CA,EAASpG,OAAM,OACA,OAArB8F,GAAe,GAAM,kBACdM,GAAQ,2CAChB,kBALgB,mCAmBjB,OAZAC,qBAAU,WAOJpH,GANkB,uCAAG,8BAAAS,EAAA,sDAC4B,OAA7CP,EAAWwH,eAAkC,SAC5BxH,EAAS0E,SAAS5E,GAAQ,OAA3C4E,EAAQ,OACdiC,EAAejC,GAAS,2CACzB,kBAJqB,kCAOpByC,KAED,CAACrH,EAASyH,EAAaF,EAA+BV,IAElD,cAAC,GAAO,2BAAC1H,IAAKA,GAASwH,GAAK,IAAE/B,SAAUgC,EAAaxE,QAAS6E,MDTrEU,OEhByD,SAAH,GAA2B,IAArBxI,EAAG,EAAHA,IAAQwH,EAAK,mBACzE,EAAsCpH,oBAAS,GAAM,mBAA9CqH,EAAW,KAAEC,EAAc,KAC1B7G,EAAYC,cAAZD,QACF4H,EAAiCC,cAC/BJ,EAAgBtI,EAAhBsI,YAEFR,EAAW,uCAAG,4BAAAxG,EAAA,sEAC2CmH,EAA+BV,UAAS,OAAjD,OAA9CC,EAA8C,gBAC9CA,EAASpG,OAAM,OACA,OAArB8F,GAAe,GAAM,kBACdM,GAAQ,2CAChB,kBALgB,mCAmBjB,OAZAC,qBAAU,WAOJpH,GANkB,uCAAG,8BAAAS,EAAA,sDAC6B,OAA9CP,EAAW4H,eAAmC,SAC7B5H,EAAS0E,SAAS5E,GAAQ,OAA3C4E,EAAQ,OACdiC,EAAejC,GAAS,2CACzB,kBAJqB,kCAOpByC,KAED,CAACrH,EAASyH,EAAaZ,IAEnB,cAAC,GAAO,2BAAC1H,IAAKA,GAASwH,GAAK,IAAE/B,SAAUgC,EAAaxE,QAAS6E,OFkBxDc,GAxBC,WACd,IAAQ3I,EAAa4I,cAAb5I,SACF6I,EAAWC,cACTlI,EAAYC,cAAZD,QAEFmI,EAAgB,WACpBF,EAASG,YAAgBpI,KAG3B,OACE,cAAC,GAAO,UACLqI,IAAQC,IAAM,aAAaC,KAAI,SAACpJ,GAC/B,IAAMqJ,EAAOlB,GAAcnI,EAAI+F,aAAeP,GAE9C,OACE,8BACE,cAAC6D,EAAI,CAACrJ,IAAKA,EAAKC,SAAUA,EAASD,EAAI+F,YAAaL,QAASsD,KADrDhJ,EAAImC,YGlClBmH,GAAalK,IAAOC,IAAG,8GACA,YAAQ,SAALO,MAAkBC,OAAO0J,cAoB1CC,UAfM,WACnB,IAAQ7I,EAAMC,cAAND,EAER,OACE,eAAC8I,EAAA,EAAI,WACH,cAACH,GAAU,UACT,cAAC,IAAO,CAACvC,GAAG,KAAK2C,MAAM,MAAM1H,MAAM,YAAW,SAC3CrB,EAAE,4BAGP,cAAC,GAAO","file":"static/js/23.9c06ace9.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { ethers } from 'ethers'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Input, Modal, Text } from '@pancakeswap/uikit'\nimport { getAddressByType } from 'utils/collectibles'\nimport { Nft } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { useERC721 } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const contract = useERC721(getAddressByType(nft.type))\n  const { toastSuccess } = useToast()\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = ethers.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(t('Please enter a valid wallet address'))\n      } else {\n        const tx = await contract.transferFrom(account, value, tokenIds[0])\n        setIsLoading(true)\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          onDismiss()\n          onSuccess()\n          toastSuccess(t('NFT successfully transferred!'))\n        } else {\n          setError(t('Unable to transfer NFT'))\n          setIsLoading(false)\n        }\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={t('Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{t('Transferring')}:</Text>\n          <Value>{t('1x %nftName% NFT', { nftName: nft.name })}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{t('Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={t('Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {t('Cancel')}\n        </Button>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {t('Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { ethers } from 'ethers'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, InjectedModalProps, Modal, Text, Flex, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { Nft } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\n\ninterface ClaimNftModalProps extends InjectedModalProps {\n  nft: Nft\n  onSuccess: () => void\n  onClaim: () => Promise<ethers.providers.TransactionResponse>\n}\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onClaim, onDismiss }) => {\n  const [isConfirming, setIsConfirming] = useState(false)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleConfirm = async () => {\n    const tx = await onClaim()\n    setIsConfirming(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      toastSuccess(t('Successfully claimed!'))\n      onDismiss()\n      onSuccess()\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsConfirming(false)\n    }\n  }\n\n  return (\n    <Modal title={t('Claim Collectible')} onDismiss={onDismiss}>\n      <ModalContent>\n        <Flex alignItems=\"center\" mb=\"8px\" justifyContent=\"space-between\">\n          <Text>{t('You will receive')}:</Text>\n          <Text bold>{t('1x %nftName% Collectible', { nftName: nft.name })}</Text>\n        </Flex>\n      </ModalContent>\n      <Actions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          onClick={handleConfirm}\n          disabled={!account}\n          isLoading={isConfirming}\n          endIcon={isConfirming ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n        >\n          {t('Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Nft } from 'config/constants/types'\n\ninterface PreviewProps {\n  nft: Nft\n  isOwned?: boolean\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 24px 24px 0 0;\n`\n\nconst StyledVideo = styled.video`\n  height: 100%;\n  width: 100%;\n`\n\nconst Preview: React.FC<PreviewProps> = ({ nft, isOwned = false }) => {\n  const { images, name, video } = nft\n  const previewImageSrc = `/images/nfts/${images.lg}`\n\n  if (video) {\n    const videoComponent = (\n      <StyledVideo autoPlay controls={false} loop muted poster={previewImageSrc}>\n        <source src={video.webm} type=\"video/webm\" />\n        <source src={video.mp4} type=\"video/mp4\" />\n      </StyledVideo>\n    )\n\n    return isOwned ? (\n      <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\n        {videoComponent}\n      </a>\n    ) : (\n      videoComponent\n    )\n  }\n\n  const previewImage = <StyledImage src={previewImageSrc} alt={name} />\n\n  return (\n    <Container>\n      {isOwned ? (\n        <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Preview\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { ethers } from 'ethers'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from '@pancakeswap/uikit'\nimport { useProfile } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Nft } from 'config/constants/types'\nimport InfoRow from '../InfoRow'\nimport TransferNftModal from '../TransferNftModal'\nimport ClaimNftModal from '../ClaimNftModal'\nimport Preview from './Preview'\n\nexport interface NftCardProps {\n  nft: Nft\n  canClaim?: boolean\n  tokenIds?: number[]\n  onClaim?: () => Promise<ethers.providers.TransactionResponse>\n  refresh: () => void\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text' })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 24px;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft, canClaim = false, tokenIds = [], onClaim, refresh }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { t } = useTranslation()\n  const { profile } = useProfile()\n  const { identifier, name, description } = nft\n  const walletOwnsNft = tokenIds.length > 0\n  const Icon = isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const handleClick = async () => {\n    setIsOpen(!isOpen)\n  }\n\n  const handleSuccess = () => {\n    refresh()\n  }\n\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} onClaim={onClaim} />)\n\n  return (\n    <Card isActive={walletOwnsNft}>\n      <Preview nft={nft} isOwned={walletOwnsNft} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {walletOwnsNft && (\n            <Tag outline variant=\"secondary\">\n              {t('In Wallet')}\n            </Tag>\n          )}\n          {profile?.nft?.identifier === identifier && (\n            <Tag outline variant=\"success\">\n              {t('Profile Pic')}\n            </Tag>\n          )}\n        </Header>\n        {canClaim && (\n          <Button width=\"100%\" mt=\"24px\" onClick={onPresentClaimModal}>\n            {t('Claim this NFT')}\n          </Button>\n        )}\n        {walletOwnsNft && (\n          <Button width=\"100%\" variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {t('Transfer')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton width=\"100%\" endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {t('Details')}\n        </DetailsButton>\n        {isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" style={{ textAlign: 'center' }}>\n              {t(description)}\n            </Text>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\n\nconst NftGrid = styled.div`\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`\n\nexport default NftGrid\n","import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport { useProfile } from 'state/hooks'\nimport { useEasterNftContract } from 'hooks/useContract'\nimport NftCard, { NftCardProps } from './index'\n\n/**\n * A map of NFT bunny Ids to Team ids\n * [identifier]: teamId\n */\nexport const teamNftMap = {\n  'easter-storm': 1,\n  'easter-flipper': 2,\n  'easter-caker': 3,\n}\n\nconst EasterNftCard: React.FC<NftCardProps> = ({ nft, ...props }) => {\n  const [isClaimable, setIsClaimable] = useState(false)\n  const { account } = useWeb3React()\n  const { profile } = useProfile()\n  const { identifier } = nft\n  const { team } = profile ?? {}\n  const easterNftContract = useEasterNftContract()\n\n  const handleClaim = async () => {\n    const response: ethers.providers.TransactionResponse = await easterNftContract.mintNFT()\n    await response.wait()\n    return response\n  }\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const canClaim = await easterNftContract.canClaim(account)\n\n      // Wallet can claim if it is claimable and the nft being displayed is mapped to the wallet's team\n      setIsClaimable(canClaim ? team.id === teamNftMap[identifier] : false)\n    }\n\n    if (account && team) {\n      fetchClaimStatus()\n    }\n  }, [account, identifier, team, easterNftContract, setIsClaimable])\n\n  return <NftCard nft={nft} {...props} canClaim={isClaimable} onClaim={handleClaim} />\n}\n\nexport default EasterNftCard\n","import React from 'react'\nimport orderBy from 'lodash/orderBy'\nimport { useWeb3React } from '@web3-react/core'\nimport nfts from 'config/constants/nfts'\nimport { useAppDispatch } from 'state'\nimport { fetchWalletNfts } from 'state/collectibles'\nimport { useGetCollectibles } from 'state/hooks'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\nimport EasterNftCard from './NftCard/EasterNftCard'\nimport BunnySpecialCakeVaultCard from './NftCard/BunnySpecialCakeVaultCard'\nimport BunnySpecialPredictionCard from './NftCard/BunnySpeciaPredictionCard'\n\n/**\n * A map of bunnyIds to special campaigns (NFT distribution)\n * Each NftCard is responsible for checking it's own claim status\n *\n */\nconst nftComponents = {\n  'easter-storm': EasterNftCard,\n  'easter-flipper': EasterNftCard,\n  'easter-caker': EasterNftCard,\n  'syrup-soak': BunnySpecialCakeVaultCard,\n  claire: BunnySpecialPredictionCard,\n}\n\nconst NftList = () => {\n  const { tokenIds } = useGetCollectibles()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleRefresh = () => {\n    dispatch(fetchWalletNfts(account))\n  }\n\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => {\n        const Card = nftComponents[nft.identifier] || NftCard\n\n        return (\n          <div key={nft.name}>\n            <Card nft={nft} tokenIds={tokenIds[nft.identifier]} refresh={handleRefresh} />\n          </div>\n        )\n      })}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport { useSpecialBunnyCakeVaultContract } from 'hooks/useContract'\nimport { getBunnySpecialCakeVaultContract } from 'utils/contractHelpers'\nimport NftCard, { NftCardProps } from './index'\n\nconst BunnySpecialCakeVaultCard: React.FC<NftCardProps> = ({ nft, ...props }) => {\n  const [isClaimable, setIsClaimable] = useState(false)\n  const { account } = useWeb3React()\n  const bunnySpecialCakeVaultContract = useSpecialBunnyCakeVaultContract()\n  const { variationId } = nft\n\n  const handleClaim = async () => {\n    const response: ethers.providers.TransactionResponse = await bunnySpecialCakeVaultContract.mintNFT()\n    await response.wait()\n    setIsClaimable(false)\n    return response\n  }\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const contract = getBunnySpecialCakeVaultContract()\n      const canClaim = await contract.canClaim(account)\n      setIsClaimable(canClaim)\n    }\n\n    if (account) {\n      fetchClaimStatus()\n    }\n  }, [account, variationId, bunnySpecialCakeVaultContract, setIsClaimable])\n\n  return <NftCard nft={nft} {...props} canClaim={isClaimable} onClaim={handleClaim} />\n}\n\nexport default BunnySpecialCakeVaultCard\n","import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport { useSpecialBunnyPredictionContract } from 'hooks/useContract'\nimport { getBunnySpecialPredictionContract } from 'utils/contractHelpers'\nimport NftCard, { NftCardProps } from './index'\n\nconst BunnySpecialPredictionCard: React.FC<NftCardProps> = ({ nft, ...props }) => {\n  const [isClaimable, setIsClaimable] = useState(false)\n  const { account } = useWeb3React()\n  const bunnySpecialPredictionContract = useSpecialBunnyPredictionContract()\n  const { variationId } = nft\n\n  const handleClaim = async () => {\n    const response: ethers.providers.TransactionResponse = await bunnySpecialPredictionContract.mintNFT()\n    await response.wait()\n    setIsClaimable(false)\n    return response\n  }\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const contract = getBunnySpecialPredictionContract()\n      const canClaim = await contract.canClaim(account)\n      setIsClaimable(canClaim)\n    }\n\n    if (account) {\n      fetchClaimStatus()\n    }\n  }, [account, variationId, setIsClaimable])\n\n  return <NftCard nft={nft} {...props} canClaim={isClaimable} onClaim={handleClaim} />\n}\n\nexport default BunnySpecialPredictionCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/Layout/Page'\nimport NftList from './components/NftList'\n\nconst StyledHero = styled.div`\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst Collectibles = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Page>\n      <StyledHero>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\">\n          {t('Pancake Collectibles')}\n        </Heading>\n      </StyledHero>\n      <NftList />\n    </Page>\n  )\n}\n\nexport default Collectibles\n"],"sourceRoot":""}