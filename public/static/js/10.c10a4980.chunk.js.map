{"version":3,"sources":["views/Voting/components/CastVoteModal/types.ts","views/Voting/Proposal/Details.tsx","views/Voting/components/TextEllipsis.tsx","views/Voting/Proposal/Results.tsx","views/Voting/components/CastVoteModal/MainView.tsx","views/Voting/components/CastVoteModal/index.tsx","views/Voting/Proposal/Vote.tsx","views/Voting/components/Proposal/VotesLoading.tsx","views/Voting/components/Proposal/Row.tsx","views/Voting/components/Proposal/VoteRow.tsx","views/Voting/Proposal/Votes.tsx","views/Voting/Proposal/index.tsx","views/Voting/helpers.ts","views/Voting/config.ts","utils/truncateWalletAddress.ts","views/Voting/components/Proposals/tags.tsx","views/Voting/components/CastVoteModal/styles.tsx","views/Voting/components/Layout.tsx","views/Voting/components/CastVoteModal/DetailsView.tsx","views/Voting/hooks/useGetVotingPower.tsx","components/ReactMarkdown/styles.tsx","components/ReactMarkdown/index.tsx"],"names":["ConfirmVoteView","DetailBox","styled","Box","theme","colors","background","cardBorder","Details","proposal","t","useTranslation","startDate","Date","start","endDate","end","mb","as","scale","alignItems","color","href","IPFS_GATEWAY","id","ml","slice","getBscScanLink","author","truncateWalletAddress","snapshot","p","proposalState","state","fontSize","format","TextEllipsis","Text","Results","choices","votes","results","calculateVoteResults","votingStatus","useGetVotingStateLoadingStatus","account","useWeb3React","totalVotes","getTotalFromVotes","VotingStateLoadingStatus","IDLE","map","choice","index","choiceVotes","totalChoiceVote","progress","eq","div","times","toNumber","hasVoted","some","vote","voter","toLowerCase","mt","title","variant","outline","mr","primaryStep","justifyContent","total","toFormat","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","LOADING","length","count","height","MainView","isPending","isLoading","onConfirm","onViewDetails","onDismiss","textTransform","bold","label","onClick","style","cursor","width","endIcon","spin","disabled","maxWidth","CastVoteModal","onSuccess","proposalId","block","useState","MAIN","view","setView","modalIsOpen","setModalIsOpen","setIsPending","toastError","useToast","library","useWeb3Provider","useTheme","useGetVotingPower","cakeBalance","cakeVaultBalance","cakePoolBalance","poolsBalance","cakeBnbLpBalance","verificationHash","isStartView","handleBack","DETAILS","handleDismiss","handleConfirmVote","a","voteMsg","JSON","stringify","generatePayloadData","type","SnapshotCommand","VOTE","payload","value","metadata","votingPower","toString","signMessage","sig","msg","address","sendSnaphotData","message","console","error","onBack","hideCloseButton","headerBackground","gradients","cardHeader","DetailsView","Choice","isChecked","isDisabled","ChoiceText","Vote","props","setVote","toastSuccess","dispatch","useAppDispatch","handleSuccess","fetchVotes","Number","useModal","presentCastVoteModal","flexShrink","checked","onChange","UnlockButton","Row","Flex","StyledSkeleton","Skeleton","VotesLoading","AddressColumn","attrs","ChoiceColumn","VotingPowerColumn","Grid","mediaQueries","sm","VoteRow","isVoter","hasVotingPower","BigNumber","parseVotePower","incomingVote","parseFloat","Votes","showAll","setShowAll","orderedVotes","orderBy","displayVotes","isFinished","py","px","Proposal","useParams","useGetProposal","useGetVotes","voteLoadingStatus","proposalLoadingStatus","useGetProposalLoadingStatus","hasAccountVoted","isPageLoading","useEffect","fetchProposal","verifyVotes","getVotes","Container","Link","to","startIcon","Layout","isCoreProposal","ReactMarkdown","body","ProposalState","ACTIVE","PageLoader","ADMIN_ADDRESS","filterProposalsByType","proposals","proposalType","ProposalType","COMMUNITY","filter","CORE","ALL","filterProposalsByState","generateMetaData","plugins","network","strategies","name","params","symbol","getCakeAddress","decimals","version","SNAPSHOT_VERSION","timestamp","now","toFixed","space","PANCAKE_SPACE","fetch","SNAPSHOT_HUB_API","method","headers","Accept","response","ok","json","Error","error_description","data","getVotingPower","poolAddresses","simpleRpcProvider","getBlockNumber","blockNumber","SNAPSHOT_VOTING_API","reduce","accum","choiceText","power","plus","BIG_ZERO","PROPOSALS_TO_SHOW","VOTE_THRESHOLD","startLength","endLength","substring","ProposalStateTag","PENDING","ProposalTypeTag","VotingBox","ModalInner","lg","textAlign","initialState","isActive","setVotingPower","setIsLoading","getActivePools","eligiblePools","contractAddress","getAddress","prevVotingPower","fetchVotingPower","Table","table","ThemedComponent","text","Title","my","markdownComponents","h1","h2","h3","h4","h5","h6","ol","ul","pre","remarkPlugins","gfm","components"],"mappings":"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","file":"static/js/10.c10a4980.chunk.js","sourcesContent":["import { InjectedModalProps } from '@pancakeswap/uikit'\n\nexport enum ConfirmVoteView {\n  MAIN = 'main',\n  DETAILS = 'details',\n}\n\nexport interface CastVoteModalProps extends InjectedModalProps {\n  onSuccess: () => Promise<void>\n  proposalId: string\n  vote: {\n    label: string\n    value: number\n  }\n  block?: number\n}\n","import React from 'react'\nimport { Box, Card, CardBody, CardHeader, Flex, Heading, LinkExternal, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { format } from 'date-fns'\nimport { Proposal } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport truncateWalletAddress from 'utils/truncateWalletAddress'\nimport { IPFS_GATEWAY } from '../config'\nimport { ProposalStateTag } from '../components/Proposals/tags'\n\ninterface DetailsProps {\n  proposal: Proposal\n}\n\nconst DetailBox = styled(Box)`\n  background-color: ${({ theme }) => theme.colors.background};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: 16px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ proposal }) => {\n  const { t } = useTranslation()\n  const startDate = new Date(proposal.start * 1000)\n  const endDate = new Date(proposal.end * 1000)\n\n  return (\n    <Card mb=\"16px\">\n      <CardHeader>\n        <Heading as=\"h3\" scale=\"md\">\n          {t('Details')}\n        </Heading>\n      </CardHeader>\n      <CardBody>\n        <Flex alignItems=\"center\" mb=\"8px\">\n          <Text color=\"textSubtle\">{t('Identifier')}</Text>\n          <LinkExternal href={`${IPFS_GATEWAY}/${proposal.id}`} ml=\"8px\">\n            {proposal.id.slice(0, 8)}\n          </LinkExternal>\n        </Flex>\n        <Flex alignItems=\"center\" mb=\"8px\">\n          <Text color=\"textSubtle\">{t('Creator')}</Text>\n          <LinkExternal href={getBscScanLink(proposal.author, 'address')} ml=\"8px\">\n            {truncateWalletAddress(proposal.author)}\n          </LinkExternal>\n        </Flex>\n        <Flex alignItems=\"center\" mb=\"16px\">\n          <Text color=\"textSubtle\">{t('Snapshot')}</Text>\n          <LinkExternal href={getBscScanLink(proposal.snapshot, 'block')} ml=\"8px\">\n            {proposal.snapshot}\n          </LinkExternal>\n        </Flex>\n        <DetailBox p=\"16px\">\n          <ProposalStateTag proposalState={proposal.state} mb=\"8px\" />\n          <Flex alignItems=\"center\">\n            <Text color=\"textSubtle\" fontSize=\"14px\">\n              {t('Start Date')}\n            </Text>\n            <Text ml=\"8px\">{format(startDate, 'yyyy-MM-dd HH:mm')}</Text>\n          </Flex>\n          <Flex alignItems=\"center\">\n            <Text color=\"textSubtle\" fontSize=\"14px\">\n              {t('End Date')}\n            </Text>\n            <Text ml=\"8px\">{format(endDate, 'yyyy-MM-dd HH:mm')}</Text>\n          </Flex>\n        </DetailBox>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default Details\n","import styled from 'styled-components'\nimport { Text } from '@pancakeswap/uikit'\n\nconst TextEllipsis = styled(Text)`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`\n\nexport default TextEllipsis\n","import React from 'react'\nimport {\n  Box,\n  Text,\n  Flex,\n  Card,\n  CardBody,\n  CardHeader,\n  Heading,\n  Progress,\n  Skeleton,\n  Tag,\n  CheckmarkCircleIcon,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport times from 'lodash/times'\nimport { Vote, VotingStateLoadingStatus } from 'state/types'\nimport { useGetVotingStateLoadingStatus } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { calculateVoteResults, getTotalFromVotes } from '../helpers'\nimport TextEllipsis from '../components/TextEllipsis'\n\ninterface ResultsProps {\n  choices: string[]\n  votes: Vote[]\n}\n\nconst Results: React.FC<ResultsProps> = ({ choices, votes }) => {\n  const { t } = useTranslation()\n  const results = calculateVoteResults(votes)\n  const votingStatus = useGetVotingStateLoadingStatus()\n  const { account } = useWeb3React()\n  const totalVotes = getTotalFromVotes(votes)\n\n  return (\n    <Card>\n      <CardHeader>\n        <Heading as=\"h3\" scale=\"md\">\n          {t('Current Results')}\n        </Heading>\n      </CardHeader>\n      <CardBody>\n        {votingStatus === VotingStateLoadingStatus.IDLE &&\n          choices.map((choice, index) => {\n            const choiceVotes = results[choice] || []\n            const totalChoiceVote = getTotalFromVotes(choiceVotes)\n\n            const progress = totalVotes.eq(0) ? 0 : totalChoiceVote.div(totalVotes).times(100).toNumber()\n            const hasVoted = choiceVotes.some((vote) => {\n              return account && vote.voter.toLowerCase() === account.toLowerCase()\n            })\n\n            return (\n              <Box key={choice} mt={index > 0 ? '24px' : '0px'}>\n                <Flex alignItems=\"center\" mb=\"8px\">\n                  <TextEllipsis mb=\"4px\" title={choice}>\n                    {choice}\n                  </TextEllipsis>\n                  {hasVoted && (\n                    <Tag variant=\"success\" outline ml=\"8px\">\n                      <CheckmarkCircleIcon mr=\"4px\" /> {t('Voted')}\n                    </Tag>\n                  )}\n                </Flex>\n                <Box mb=\"4px\">\n                  <Progress primaryStep={progress} scale=\"sm\" />\n                </Box>\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                  <Text color=\"textSubtle\">{t('%total% Votes', { total: totalChoiceVote.toFormat(3) })}</Text>\n                  <Text>\n                    {progress.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}%\n                  </Text>\n                </Flex>\n              </Box>\n            )\n          })}\n\n        {votingStatus === VotingStateLoadingStatus.LOADING &&\n          times(choices.length).map((count, index) => {\n            return (\n              <Box key={count} mt={index > 0 ? '24px' : '0px'}>\n                <Skeleton height=\"36px\" mb=\"4px\" />\n              </Box>\n            )\n          })}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default Results\n","import React from 'react'\nimport {\n  Box,\n  IconButton,\n  Text,\n  Skeleton,\n  Button,\n  Message as UIKitMessage,\n  AutoRenewIcon,\n  ChevronRightIcon,\n} from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport TextEllipsis from '../TextEllipsis'\nimport { VotingBox, ModalInner } from './styles'\nimport { CastVoteModalProps } from './types'\n\ninterface MainViewProps {\n  vote: {\n    label: string\n    value: number\n  }\n  isLoading: boolean\n  isPending: boolean\n  total: BigNumber\n  onConfirm: () => void\n  onViewDetails: () => void\n  onDismiss: CastVoteModalProps['onDismiss']\n}\n\nconst MainView: React.FC<MainViewProps> = ({\n  vote,\n  total,\n  isPending,\n  isLoading,\n  onConfirm,\n  onViewDetails,\n  onDismiss,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <ModalInner>\n        <Text color=\"secondary\" mb=\"8px\" textTransform=\"uppercase\" fontSize=\"12px\" bold>\n          {t('Voting For')}\n        </Text>\n        <TextEllipsis bold fontSize=\"20px\" mb=\"8px\" title={vote.label}>\n          {vote.label}\n        </TextEllipsis>\n        <Text color=\"secondary\" mb=\"8px\" textTransform=\"uppercase\" fontSize=\"12px\" bold>\n          {t('Your Voting Power')}\n        </Text>\n        {isLoading ? (\n          <Skeleton height=\"64px\" mb=\"24px\" />\n        ) : (\n          <VotingBox onClick={onViewDetails} style={{ cursor: 'pointer' }}>\n            <Text bold fontSize=\"20px\">\n              {total.toFormat(3)}\n            </Text>\n            <IconButton scale=\"sm\" variant=\"text\">\n              <ChevronRightIcon width=\"24px\" />\n            </IconButton>\n          </VotingBox>\n        )}\n        <Text as=\"p\" color=\"textSubtle\" fontSize=\"14px\">\n          {t('Are you sure you want to vote for the above choice? This action cannot be undone.')}\n        </Text>\n      </ModalInner>\n      <Button\n        isLoading={isPending}\n        endIcon={isPending ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        disabled={isLoading || total.eq(0)}\n        width=\"100%\"\n        mb=\"8px\"\n        onClick={onConfirm}\n      >\n        {t('Confirm Vote')}\n      </Button>\n      <Button variant=\"secondary\" width=\"100%\" onClick={onDismiss}>\n        {t('Cancel')}\n      </Button>\n      <Box mt=\"24px\" maxWidth=\"320px\">\n        <UIKitMessage variant=\"warning\">\n          <Text as=\"p\">\n            {t('SafePal users may be temporarily unable to vote: Please connect directly via WalletConnect instead.')}\n          </Text>\n        </UIKitMessage>\n      </Box>\n    </>\n  )\n}\n\nexport default MainView\n","import React, { useState } from 'react'\nimport { Box, Modal } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { SnapshotCommand } from 'state/types'\nimport { signMessage } from 'utils/web3React'\nimport useToast from 'hooks/useToast'\nimport useWeb3Provider from 'hooks/useActiveWeb3React'\nimport useTheme from 'hooks/useTheme'\nimport { CastVoteModalProps, ConfirmVoteView } from './types'\nimport MainView from './MainView'\nimport DetailsView from './DetailsView'\nimport { generatePayloadData, Message, sendSnaphotData } from '../../helpers'\nimport useGetVotingPower from '../../hooks/useGetVotingPower'\n\nconst CastVoteModal: React.FC<CastVoteModalProps> = ({ onSuccess, proposalId, vote, block, onDismiss }) => {\n  const [view, setView] = useState<ConfirmVoteView>(ConfirmVoteView.MAIN)\n  const [modalIsOpen, setModalIsOpen] = useState(true)\n  const [isPending, setIsPending] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const { library } = useWeb3Provider()\n  const { theme } = useTheme()\n  const {\n    isLoading,\n    total,\n    cakeBalance,\n    cakeVaultBalance,\n    cakePoolBalance,\n    poolsBalance,\n    cakeBnbLpBalance,\n    verificationHash,\n  } = useGetVotingPower(block, modalIsOpen)\n\n  const isStartView = view === ConfirmVoteView.MAIN\n  const handleBack = isStartView ? null : () => setView(ConfirmVoteView.MAIN)\n  const handleViewDetails = () => setView(ConfirmVoteView.DETAILS)\n\n  const title = {\n    [ConfirmVoteView.MAIN]: t('Confirm Vote'),\n    [ConfirmVoteView.DETAILS]: t('Voting Power'),\n  }\n\n  const handleDismiss = () => {\n    setModalIsOpen(false)\n    onDismiss()\n  }\n\n  const handleConfirmVote = async () => {\n    try {\n      setIsPending(true)\n      const voteMsg = JSON.stringify({\n        ...generatePayloadData(),\n        type: SnapshotCommand.VOTE,\n        payload: {\n          proposal: proposalId,\n          choice: vote.value,\n          metadata: {\n            votingPower: total.toString(),\n            verificationHash,\n          },\n        },\n      })\n\n      const sig = await signMessage(library, account, voteMsg)\n      const msg: Message = { address: account, msg: voteMsg, sig }\n\n      // Save proposal to snapshot\n      await sendSnaphotData(msg)\n      setIsPending(false)\n\n      await onSuccess()\n\n      handleDismiss()\n    } catch (error) {\n      setIsPending(false)\n      toastError(t('Error'), error?.message)\n      console.error(error)\n    }\n  }\n\n  return (\n    <Modal\n      title={title[view]}\n      onBack={handleBack}\n      onDismiss={onDismiss}\n      hideCloseButton={!isStartView}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Box mb=\"24px\" width=\"320px\">\n        {view === ConfirmVoteView.MAIN && (\n          <MainView\n            vote={vote}\n            isLoading={isLoading}\n            isPending={isPending}\n            total={total}\n            onConfirm={handleConfirmVote}\n            onViewDetails={handleViewDetails}\n            onDismiss={handleDismiss}\n          />\n        )}\n        {view === ConfirmVoteView.DETAILS && (\n          <DetailsView\n            total={total}\n            cakeBalance={cakeBalance}\n            cakeVaultBalance={cakeVaultBalance}\n            cakePoolBalance={cakePoolBalance}\n            poolsBalance={poolsBalance}\n            cakeBnbLpBalance={cakeBnbLpBalance}\n          />\n        )}\n      </Box>\n    </Modal>\n  )\n}\n\nexport default CastVoteModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Card, CardBody, CardHeader, CardProps, Heading, Radio, Text, useModal } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { Proposal } from 'state/types'\nimport { fetchVotes } from 'state/voting'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport UnlockButton from 'components/UnlockButton'\nimport CastVoteModal from '../components/CastVoteModal'\n\ninterface VoteProps extends CardProps {\n  proposal: Proposal\n}\n\ninterface State {\n  label: string\n  value: number\n}\n\nconst Choice = styled.label<{ isChecked: boolean; isDisabled: boolean }>`\n  align-items: center;\n  border: 1px solid ${({ theme, isChecked }) => theme.colors[isChecked ? 'success' : 'cardBorder']};\n  border-radius: 16px;\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\n  display: flex;\n  margin-bottom: 16px;\n  padding: 16px;\n`\n\nconst ChoiceText = styled.div`\n  flex: 1;\n  padding-left: 16px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 0;\n`\n\nconst Vote: React.FC<VoteProps> = ({ proposal, ...props }) => {\n  const [vote, setVote] = useState<State>(null)\n  const { t } = useTranslation()\n  const { toastSuccess } = useToast()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleSuccess = async () => {\n    toastSuccess(t('Vote cast!'))\n    dispatch(fetchVotes({ proposalId: proposal.id, block: Number(proposal.snapshot) }))\n  }\n\n  const [presentCastVoteModal] = useModal(\n    <CastVoteModal onSuccess={handleSuccess} proposalId={proposal.id} vote={vote} block={Number(proposal.snapshot)} />,\n  )\n\n  return (\n    <Card {...props}>\n      <CardHeader>\n        <Heading as=\"h3\" scale=\"md\">\n          {t('Cast your vote')}\n        </Heading>\n      </CardHeader>\n      <CardBody>\n        {proposal.choices.map((choice, index) => {\n          const isChecked = index + 1 === vote?.value\n\n          const handleChange = () => {\n            setVote({\n              label: choice,\n              value: index + 1,\n            })\n          }\n\n          return (\n            <Choice key={choice} isChecked={isChecked} isDisabled={!account}>\n              <div style={{ flexShrink: 0 }}>\n                <Radio scale=\"sm\" value={choice} checked={isChecked} onChange={handleChange} disabled={!account} />\n              </div>\n              <ChoiceText>\n                <Text as=\"span\" title={choice}>\n                  {choice}\n                </Text>\n              </ChoiceText>\n            </Choice>\n          )\n        })}\n        {account ? (\n          <Button onClick={presentCastVoteModal} disabled={vote === null}>\n            {t('Cast Vote')}\n          </Button>\n        ) : (\n          <UnlockButton />\n        )}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default Vote\n","import React from 'react'\nimport { Box, Flex, Skeleton } from '@pancakeswap/uikit'\nimport times from 'lodash/times'\nimport styled from 'styled-components'\n\nconst Row = styled(Flex)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  padding: 16px 24px;\n`\n\nconst StyledSkeleton = styled(Skeleton)`\n  flex: 1;\n`\n\nconst VotesLoading = () => {\n  return (\n    <Box>\n      {times(10).map((index) => (\n        <Row key={index}>\n          <Skeleton height=\"21px\" mr=\"32px\" width=\"100px\" />\n          <StyledSkeleton height=\"21px\" mr=\"32px\" width=\"100%\" />\n          <StyledSkeleton height=\"21px\" width=\"100%\" />\n        </Row>\n      ))}\n    </Box>\n  )\n}\n\nexport default VotesLoading\n","import styled from 'styled-components'\nimport { Grid, Box } from '@pancakeswap/uikit'\n\nexport const AddressColumn = styled(Box).attrs({ alignItems: 'center' })`\n  grid-area: address;\n`\n\nexport const ChoiceColumn = styled(Box)`\n  grid-area: choice;\n  overflow: hidden;\n`\n\nexport const VotingPowerColumn = styled(Box)`\n  justify-self: end;\n  grid-area: vote;\n`\n\nconst Row = styled(Grid)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  grid-gap: 8px;\n  grid-template-areas: 'address choice vote';\n  grid-template-columns: minmax(110px, 200px) 1fr 1fr;\n  padding: 8px 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-gap: 16px;\n    padding: 16px 24px;\n  }\n`\n\nexport default Row\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Flex, LinkExternal, Text, Tag, CheckmarkCircleIcon } from '@pancakeswap/uikit'\nimport truncateWalletAddress from 'utils/truncateWalletAddress'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport { Vote } from 'state/types'\nimport { IPFS_GATEWAY } from '../../config'\nimport TextEllipsis from '../TextEllipsis'\nimport Row, { AddressColumn, ChoiceColumn, VotingPowerColumn } from './Row'\n\ninterface VoteRowProps {\n  vote: Vote\n  isVoter: boolean\n}\n\nconst VoteRow: React.FC<VoteRowProps> = ({ vote, isVoter }) => {\n  const { t } = useTranslation()\n  const hasVotingPower = !!vote.metadata?.votingPower\n  const votingPower = hasVotingPower ? new BigNumber(vote.metadata.votingPower).toFormat(3) : '--'\n\n  return (\n    <Row>\n      <AddressColumn>\n        <Flex alignItems=\"center\">\n          <LinkExternal href={getBscScanLink(vote.voter, 'address')}>{truncateWalletAddress(vote.voter)}</LinkExternal>\n          {isVoter && (\n            <Tag variant=\"success\" outline ml=\"8px\">\n              <CheckmarkCircleIcon mr=\"4px\" /> {t('Voted')}\n            </Tag>\n          )}\n        </Flex>\n      </AddressColumn>\n      <ChoiceColumn>\n        <TextEllipsis title={vote.proposal.choices[vote.choice - 1]}>\n          {vote.proposal.choices[vote.choice - 1]}\n        </TextEllipsis>\n      </ChoiceColumn>\n      <VotingPowerColumn>\n        <Flex alignItems=\"center\" justifyContent=\"end\">\n          <Text title={vote.metadata.votingPower}>{votingPower}</Text>\n          {hasVotingPower && <LinkExternal href={`${IPFS_GATEWAY}/${vote.id}`} />}\n        </Flex>\n      </VotingPowerColumn>\n    </Row>\n  )\n}\n\nexport default VoteRow\n","import React, { useState } from 'react'\nimport {\n  AutoRenewIcon,\n  Card,\n  CardHeader,\n  ChevronDownIcon,\n  Flex,\n  Heading,\n  Button,\n  ChevronUpIcon,\n  Text,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport orderBy from 'lodash/orderBy'\nimport { useTranslation } from 'contexts/Localization'\nimport { Vote, VotingStateLoadingStatus } from 'state/types'\nimport { useGetVotingStateLoadingStatus } from 'state/hooks'\nimport VotesLoading from '../components/Proposal/VotesLoading'\nimport VoteRow from '../components/Proposal/VoteRow'\nimport Row, { AddressColumn, ChoiceColumn, VotingPowerColumn } from '../components/Proposal/Row'\n\nconst VOTES_PER_VIEW = 20\n\ninterface VotesProps {\n  votes: Vote[]\n}\n\nconst parseVotePower = (incomingVote: Vote) => {\n  return parseFloat(incomingVote?.metadata?.votingPower)\n}\n\nconst Votes: React.FC<VotesProps> = ({ votes }) => {\n  const [showAll, setShowAll] = useState(false)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const orderedVotes = orderBy(votes, [parseVotePower, 'created'], ['desc', 'desc'])\n  const displayVotes = showAll ? orderedVotes : orderedVotes.slice(0, VOTES_PER_VIEW)\n  const voteStatus = useGetVotingStateLoadingStatus()\n  const isFinished = voteStatus === VotingStateLoadingStatus.IDLE\n\n  const handleClick = () => {\n    setShowAll(!showAll)\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Heading as=\"h3\" scale=\"md\">\n            {t('Votes (%count%)', { count: votes.length.toLocaleString() })}\n          </Heading>\n          {!isFinished && <AutoRenewIcon spin width=\"22px\" />}\n        </Flex>\n      </CardHeader>\n      {!isFinished && <VotesLoading />}\n\n      {isFinished && displayVotes.length > 0 && (\n        <>\n          <Row>\n            <AddressColumn>\n              <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                {t('Voter')}\n              </Text>\n            </AddressColumn>\n            <ChoiceColumn>\n              <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                {t('Decision')}\n              </Text>\n            </ChoiceColumn>\n            <VotingPowerColumn>\n              <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                {t('Vote Weight')}\n              </Text>\n            </VotingPowerColumn>\n          </Row>\n          {displayVotes.map((vote) => {\n            const isVoter = account && vote.voter.toLowerCase() === account.toLowerCase()\n            return <VoteRow key={vote.id} vote={vote} isVoter={isVoter} />\n          })}\n          <Flex alignItems=\"center\" justifyContent=\"center\" py=\"8px\" px=\"24px\">\n            <Button\n              width=\"100%\"\n              onClick={handleClick}\n              variant=\"text\"\n              endIcon={\n                showAll ? (\n                  <ChevronUpIcon color=\"primary\" width=\"21px\" />\n                ) : (\n                  <ChevronDownIcon color=\"primary\" width=\"21px\" />\n                )\n              }\n              disabled={!isFinished}\n            >\n              {showAll ? t('Hide') : t('See All')}\n            </Button>\n          </Flex>\n        </>\n      )}\n\n      {isFinished && displayVotes.length === 0 && (\n        <Flex alignItems=\"center\" justifyContent=\"center\" py=\"32px\">\n          <Heading as=\"h5\">{t('No votes found')}</Heading>\n        </Flex>\n      )}\n    </Card>\n  )\n}\n\nexport default Votes\n","import React, { useEffect } from 'react'\nimport { ArrowBackIcon, Box, Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { Link, useParams } from 'react-router-dom'\nimport { useAppDispatch } from 'state'\nimport { ProposalState, VotingStateLoadingStatus } from 'state/types'\nimport { useGetProposal, useGetVotingStateLoadingStatus, useGetVotes, useGetProposalLoadingStatus } from 'state/hooks'\nimport { fetchProposal, fetchVotes, verifyVotes } from 'state/voting'\nimport { useTranslation } from 'contexts/Localization'\nimport Container from 'components/Layout/Container'\nimport ReactMarkdown from 'components/ReactMarkdown'\nimport PageLoader from 'components/Loader/PageLoader'\nimport { isCoreProposal } from '../helpers'\nimport { ProposalStateTag, ProposalTypeTag } from '../components/Proposals/tags'\nimport Layout from '../components/Layout'\nimport Details from './Details'\nimport Results from './Results'\nimport Vote from './Vote'\nimport Votes from './Votes'\n\nconst Proposal = () => {\n  const { id }: { id: string } = useParams()\n  const proposal = useGetProposal(id)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const votes = useGetVotes(id)\n  const voteLoadingStatus = useGetVotingStateLoadingStatus()\n  const proposalLoadingStatus = useGetProposalLoadingStatus()\n  const hasAccountVoted = account && votes.some((vote) => vote.voter.toLowerCase() === account.toLowerCase())\n  const { id: proposalId = null, snapshot = null } = proposal ?? {}\n  const isPageLoading =\n    voteLoadingStatus === VotingStateLoadingStatus.LOADING || proposalLoadingStatus === VotingStateLoadingStatus.LOADING\n\n  useEffect(() => {\n    dispatch(fetchProposal(id))\n  }, [id, dispatch])\n\n  // We have to wait for the proposal to load before fetching the votes because we need to include the snapshot\n  useEffect(() => {\n    const getVotes = async () => {\n      await dispatch(fetchVotes({ proposalId, block: Number(snapshot) }))\n      dispatch(verifyVotes({ proposalId, snapshot }))\n    }\n\n    if (proposalId && snapshot) {\n      getVotes()\n    }\n  }, [proposalId, snapshot, dispatch])\n\n  if (!proposal) {\n    return <PageLoader />\n  }\n\n  return (\n    <Container py=\"40px\">\n      <Box mb=\"40px\">\n        <Button as={Link} to=\"/voting\" variant=\"text\" startIcon={<ArrowBackIcon color=\"primary\" width=\"24px\" />} px=\"0\">\n          {t('Back to Vote Overview')}\n        </Button>\n      </Box>\n      <Layout>\n        <Box>\n          <Box mb=\"32px\">\n            <Flex alignItems=\"center\" mb=\"8px\">\n              <ProposalStateTag proposalState={proposal.state} />\n              <ProposalTypeTag isCoreProposal={isCoreProposal(proposal)} ml=\"8px\" />\n            </Flex>\n            <Heading as=\"h1\" scale=\"xl\" mb=\"16px\">\n              {proposal.title}\n            </Heading>\n            <Box>\n              <ReactMarkdown>{proposal.body}</ReactMarkdown>\n            </Box>\n          </Box>\n          {!isPageLoading && !hasAccountVoted && proposal.state === ProposalState.ACTIVE && (\n            <Vote proposal={proposal} mb=\"16px\" />\n          )}\n          <Votes votes={votes} />\n        </Box>\n        <Box>\n          <Details proposal={proposal} />\n          <Results choices={proposal.choices} votes={votes} />\n        </Box>\n      </Layout>\n    </Container>\n  )\n}\n\nexport default Proposal\n","import BigNumber from 'bignumber.js'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { SNAPSHOT_HUB_API, SNAPSHOT_VOTING_API } from 'config/constants/endpoints'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Proposal, ProposalState, ProposalType, Vote } from 'state/types'\nimport { simpleRpcProvider } from 'utils/providers'\nimport { ADMIN_ADDRESS, PANCAKE_SPACE, SNAPSHOT_VERSION } from './config'\n\nexport const isCoreProposal = (proposal: Proposal) => {\n  return proposal.author.toLowerCase() === ADMIN_ADDRESS.toLowerCase()\n}\n\nexport const filterProposalsByType = (proposals: Proposal[], proposalType: ProposalType) => {\n  switch (proposalType) {\n    case ProposalType.COMMUNITY:\n      return proposals.filter((proposal) => !isCoreProposal(proposal))\n    case ProposalType.CORE:\n      return proposals.filter((proposal) => isCoreProposal(proposal))\n    case ProposalType.ALL:\n    default:\n      return proposals\n  }\n}\n\nexport const filterProposalsByState = (proposals: Proposal[], state: ProposalState) => {\n  return proposals.filter((proposal) => proposal.state === state)\n}\n\nexport interface Message {\n  address: string\n  msg: string\n  sig: string\n}\n\n/**\n * Generates metadata required by snapshot to validate payload\n */\nexport const generateMetaData = () => {\n  return {\n    plugins: {},\n    network: 56,\n    strategies: [{ name: 'cake', params: { symbol: 'CAKE', address: getCakeAddress(), decimals: 18 } }],\n  }\n}\n\n/**\n * Returns data that is required on all snapshot payloads\n */\nexport const generatePayloadData = () => {\n  return {\n    version: SNAPSHOT_VERSION,\n    timestamp: (Date.now() / 1e3).toFixed(),\n    space: PANCAKE_SPACE,\n  }\n}\n\n/**\n * General function to send commands to the snapshot api\n */\nexport const sendSnaphotData = async (message: Message) => {\n  const response = await fetch(SNAPSHOT_HUB_API, {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(message),\n  })\n\n  if (!response.ok) {\n    const error = await response.json()\n    throw new Error(error?.error_description)\n  }\n\n  const data = await response.json()\n  return data\n}\n\nexport const getVotingPower = async (account: string, poolAddresses: string[], block?: number) => {\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n  const response = await fetch(`${SNAPSHOT_VOTING_API}/power`, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      address: account,\n      block: blockNumber,\n      poolAddresses,\n    }),\n  })\n  const data = await response.json()\n  return data.data\n}\n\nexport const calculateVoteResults = (votes: Vote[]): { [key: string]: Vote[] } => {\n  return votes.reduce((accum, vote) => {\n    const choiceText = vote.proposal.choices[vote.choice - 1]\n\n    return {\n      ...accum,\n      [choiceText]: accum[choiceText] ? [...accum[choiceText], vote] : [vote],\n    }\n  }, {})\n}\n\nexport const getTotalFromVotes = (votes: Vote[]) => {\n  return votes.reduce((accum, vote) => {\n    const power = new BigNumber(vote.metadata?.votingPower)\n    return accum.plus(power)\n  }, BIG_ZERO)\n}\n","export const PROPOSALS_TO_SHOW = 10\nexport const ADMIN_ADDRESS = '0x6eaf1b33b8672c5dc40aB8f4bA3A0111723126c7'\nexport const IPFS_GATEWAY = 'https://gateway.ipfs.io/ipfs'\nexport const SNAPSHOT_VERSION = '0.1.3'\nexport const PANCAKE_SPACE = 'cake.eth'\nexport const VOTE_THRESHOLD = 10\n","/**\n * Truncates a wallet's address\n */\nconst truncateWalletAddress = (address: string, startLength = 4, endLength = 4) => {\n  return `${address.substring(0, startLength)}...${address.substring(address.length - endLength)}`\n}\n\nexport default truncateWalletAddress\n","import React from 'react'\nimport { TagProps } from '@pancakeswap/uikit'\nimport { ClosedTag, CommunityTag, CoreTag, SoonTag, VoteNowTag } from 'components/Tags'\nimport { ProposalState } from 'state/types'\n\ninterface ProposalStateTagProps extends TagProps {\n  proposalState: ProposalState\n}\n\nexport const ProposalStateTag: React.FC<ProposalStateTagProps> = ({ proposalState, ...props }) => {\n  if (proposalState === ProposalState.ACTIVE) {\n    return <VoteNowTag {...props} />\n  }\n\n  if (proposalState === ProposalState.PENDING) {\n    return <SoonTag {...props} />\n  }\n\n  return <ClosedTag {...props} />\n}\n\ninterface ProposalTypeTagProps extends TagProps {\n  isCoreProposal: boolean\n}\n\nexport const ProposalTypeTag: React.FC<ProposalTypeTagProps> = ({ isCoreProposal, ...props }) => {\n  if (isCoreProposal) {\n    return <CoreTag {...props} />\n  }\n\n  return <CommunityTag {...props} />\n}\n","import React from 'react'\nimport { Box, BoxProps } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nexport const VotingBox = styled.div`\n  align-items: center;\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: 12px;\n  display: flex;\n  height: 64px;\n  justify-content: space-between;\n  margin-bottom: 24px;\n  padding: 0 16px;\n`\n\nexport const ModalInner: React.FC<BoxProps> = (props) => {\n  return <Box mb=\"24px\" maxWidth=\"320px\" {...props} />\n}\n","import styled from 'styled-components'\n\nconst Layout = styled.div`\n  align-items: start;\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: minmax(0, 1fr);\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    grid-template-columns: 1fr 332px;\n  }\n`\n\nexport default Layout\n","import React from 'react'\nimport { Text, Flex } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { VotingBox, ModalInner } from './styles'\n\ninterface DetailsViewProps {\n  total: BigNumber\n  cakeBalance: BigNumber\n  cakeVaultBalance: BigNumber\n  cakePoolBalance: BigNumber\n  poolsBalance: BigNumber\n  cakeBnbLpBalance: BigNumber\n}\n\nconst DetailsView: React.FC<DetailsViewProps> = ({\n  total,\n  cakeBalance,\n  cakeVaultBalance,\n  cakePoolBalance,\n  poolsBalance,\n  cakeBnbLpBalance,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <ModalInner mb=\"0\">\n      <Text as=\"p\" mb=\"24px\" fontSize=\"14px\" color=\"textSubtle\">\n        {t(\n          'Your voting power is determined by the amount of CAKE you held at the block detailed below. CAKE held in other places does not contribute to your voting power.',\n        )}\n      </Text>\n      <Text color=\"secondary\" textTransform=\"uppercase\" mb=\"4px\" bold fontSize=\"14px\">\n        {t('Overview')}\n      </Text>\n      <VotingBox>\n        <Text color=\"secondary\">{t('Your Voting Power')}</Text>\n        <Text bold fontSize=\"20px\">\n          {total.toFormat(3)}\n        </Text>\n      </VotingBox>\n      <Text color=\"secondary\" textTransform=\"uppercase\" mb=\"4px\" bold fontSize=\"14px\">\n        {t('Your Cake Held Now')}\n      </Text>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n        <Text color=\"textSubtle\" fontSize=\"16px\">\n          {t('Wallet')}\n        </Text>\n        <Text textAlign=\"right\">{cakeBalance.toFormat(3)}</Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n        <Text color=\"textSubtle\" fontSize=\"16px\">\n          {t('Manual CAKE Pool')}\n        </Text>\n        <Text textAlign=\"right\">{cakePoolBalance.toFormat(3)}</Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n        <Text color=\"textSubtle\" fontSize=\"16px\">\n          {t('Auto CAKE Pool')}\n        </Text>\n        <Text textAlign=\"right\">{cakeVaultBalance.toFormat(3)}</Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n        <Text color=\"textSubtle\" fontSize=\"16px\">\n          {t('Other Syrup Pools')}\n        </Text>\n        <Text textAlign=\"right\">{poolsBalance.toFormat(3)}</Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n        <Text color=\"textSubtle\" fontSize=\"16px\">\n          {t('CAKE BNB LP')}\n        </Text>\n        <Text textAlign=\"right\">{cakeBnbLpBalance.toFormat(3)}</Text>\n      </Flex>\n    </ModalInner>\n  )\n}\n\nexport default DetailsView\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getActivePools } from 'utils/calls'\nimport { getAddress } from 'utils/addressHelpers'\nimport { simpleRpcProvider } from 'utils/providers'\nimport BigNumber from 'bignumber.js'\nimport { getVotingPower } from '../helpers'\n\ninterface State {\n  verificationHash: string\n  cakeBalance: BigNumber\n  cakeVaultBalance: BigNumber\n  cakePoolBalance: BigNumber\n  poolsBalance: BigNumber\n  cakeBnbLpBalance: BigNumber\n  total: BigNumber\n}\n\nconst initialState: State = {\n  verificationHash: null,\n  cakeBalance: BIG_ZERO,\n  cakeVaultBalance: BIG_ZERO,\n  cakePoolBalance: BIG_ZERO,\n  poolsBalance: BIG_ZERO,\n  cakeBnbLpBalance: BIG_ZERO,\n  total: BIG_ZERO,\n}\n\nconst useGetVotingPower = (block?: number, isActive = true): State & { isLoading: boolean } => {\n  const { account } = useWeb3React()\n  const [votingPower, setVotingPower] = useState(initialState)\n  const [isLoading, setIsLoading] = useState(!!account)\n\n  useEffect(() => {\n    const fetchVotingPower = async () => {\n      setIsLoading(true)\n\n      try {\n        const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n        const eligiblePools = await getActivePools(blockNumber)\n        const poolAddresses = eligiblePools.map(({ contractAddress }) => getAddress(contractAddress))\n        const {\n          cakeBalance,\n          cakeBnbLpBalance,\n          cakePoolBalance,\n          total,\n          poolsBalance,\n          cakeVaultBalance,\n          verificationHash,\n        } = await getVotingPower(account, poolAddresses, blockNumber)\n\n        if (isActive) {\n          setVotingPower((prevVotingPower) => ({\n            ...prevVotingPower,\n            verificationHash,\n            cakeBalance: new BigNumber(cakeBalance),\n            cakeBnbLpBalance: new BigNumber(cakeBnbLpBalance),\n            cakePoolBalance: new BigNumber(cakePoolBalance),\n            poolsBalance: new BigNumber(poolsBalance),\n            cakeVaultBalance: new BigNumber(cakeVaultBalance),\n            total: new BigNumber(total),\n          }))\n        }\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    if (account && isActive) {\n      fetchVotingPower()\n    }\n  }, [account, block, setVotingPower, isActive, setIsLoading])\n\n  return { ...votingPower, isLoading }\n}\n\nexport default useGetVotingPower\n","import React from 'react'\nimport { Heading, Text } from '@pancakeswap/uikit'\nimport { NormalComponents, SpecialComponents } from 'react-markdown/src/ast-to-react'\nimport styled from 'styled-components'\n\nconst Table = styled.table`\n  margin-bottom: 32px;\n  margin-top: 32px;\n  width: 100%;\n\n  td,\n  th {\n    padding: 8px;\n  }\n`\n\nconst ThemedComponent = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  margin-bottom: 16px;\n  margin-top: 16px;\n\n  li {\n    margin-bottom: 8px;\n  }\n`\n\nconst Pre = styled.pre`\n  color: ${({ theme }) => theme.colors.text};\n  margin-bottom: 16px;\n  margin-top: 16px;\n  max-width: 100%;\n  overflow-x: auto;\n`\n\nconst Title = (props) => {\n  return <Heading as=\"h4\" scale=\"lg\" my=\"16px\" {...props} />\n}\n\nconst markdownComponents: Partial<NormalComponents & SpecialComponents> = {\n  h1: Title,\n  h2: Title,\n  h3: Title,\n  h4: Title,\n  h5: Title,\n  h6: Title,\n  p: (props) => {\n    return <Text as=\"p\" my=\"16px\" {...props} />\n  },\n  table: Table,\n  ol: (props) => {\n    return <ThemedComponent as=\"ol\" {...props} />\n  },\n  ul: (props) => {\n    return <ThemedComponent as=\"ul\" {...props} />\n  },\n  pre: Pre,\n}\n\nexport default markdownComponents\n","import React from 'react'\nimport ReactMarkdownLib, { ReactMarkdownOptions } from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport markdownComponents from './styles'\n\nconst ReactMarkdown: React.FC<ReactMarkdownOptions> = (props) => {\n  return <ReactMarkdownLib remarkPlugins={[gfm]} components={markdownComponents} {...props} />\n}\n\nexport default ReactMarkdown\n"],"sourceRoot":""}