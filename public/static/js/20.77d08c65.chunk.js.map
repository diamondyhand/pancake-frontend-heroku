{"version":3,"sources":["views/PoolFinder/index.tsx","components/Links/index.tsx"],"names":["Fields","StyledButton","styled","Button","theme","colors","input","text","PoolFinder","account","useActiveWeb3React","t","useTranslation","useState","TOKEN1","activeField","setActiveField","ETHER","currency0","setCurrency0","currency1","setCurrency1","usePair","undefined","pairState","pair","addPair","usePairAdder","useEffect","validPairNoLiquidity","PairState","NOT_EXISTS","Boolean","EXISTS","JSBI","equal","reserve0","raw","BigInt","reserve1","position","useTokenBalance","liquidityToken","hasPosition","greaterThan","handleCurrencySelect","useCallback","currency","TOKEN0","prerequisiteMessage","padding","textAlign","useModal","onCurrencySelect","showCommonBases","selectedCurrency","onPresentCurrencyModal","title","subtitle","backTo","style","gap","endIcon","onClick","ml","symbol","as","Row","justifyItems","backgroundColor","borderRadius","to","justify","currencyId","INVALID","fontWeight","LOADING","StyledInternalLink","Link","primary"],"mappings":"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","file":"static/js/20.77d08c65.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport { Currency, ETHER, JSBI, TokenAmount } from '@pancakeswap/sdk'\nimport { Button, ChevronDownIcon, Text, AddIcon, useModal } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LightCard } from '../../components/Card'\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\nimport { CurrencyLogo } from '../../components/Logo'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport Row from '../../components/Layout/Row'\nimport CurrencySearchModal from '../../components/SearchModal/CurrencySearchModal'\nimport { PairState, usePair } from '../../hooks/usePairs'\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\nimport { usePairAdder } from '../../state/user/hooks'\nimport { useTokenBalance } from '../../state/wallet/hooks'\nimport StyledInternalLink from '../../components/Links'\nimport { currencyId } from '../../utils/currencyId'\nimport Dots from '../../components/Loader/Dots'\nimport { AppHeader, AppBody } from '../../components/App'\nimport Page from '../Page'\n\nenum Fields {\n  TOKEN0 = 0,\n  TOKEN1 = 1,\n}\n\nconst StyledButton = styled(Button)`\n  background-color: ${({ theme }) => theme.colors.input};\n  color: ${({ theme }) => theme.colors.text};\n  box-shadow: none;\n  border-radius: 16px;\n`\n\nexport default function PoolFinder() {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  const [activeField, setActiveField] = useState<number>(Fields.TOKEN1)\n  const [currency0, setCurrency0] = useState<Currency | null>(ETHER)\n  const [currency1, setCurrency1] = useState<Currency | null>(null)\n\n  const [pairState, pair] = usePair(currency0 ?? undefined, currency1 ?? undefined)\n  const addPair = usePairAdder()\n  useEffect(() => {\n    if (pair) {\n      addPair(pair)\n    }\n  }, [pair, addPair])\n\n  const validPairNoLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS ||\n    Boolean(\n      pairState === PairState.EXISTS &&\n        pair &&\n        JSBI.equal(pair.reserve0.raw, JSBI.BigInt(0)) &&\n        JSBI.equal(pair.reserve1.raw, JSBI.BigInt(0)),\n    )\n\n  const position: TokenAmount | undefined = useTokenBalance(account ?? undefined, pair?.liquidityToken)\n  const hasPosition = Boolean(position && JSBI.greaterThan(position.raw, JSBI.BigInt(0)))\n\n  const handleCurrencySelect = useCallback(\n    (currency: Currency) => {\n      if (activeField === Fields.TOKEN0) {\n        setCurrency0(currency)\n      } else {\n        setCurrency1(currency)\n      }\n    },\n    [activeField],\n  )\n\n  const prerequisiteMessage = (\n    <LightCard padding=\"45px 10px\">\n      <Text textAlign=\"center\">\n        {!account ? t('Connect to a wallet to find pools') : t('Select a token to find your liquidity.')}\n      </Text>\n    </LightCard>\n  )\n\n  const [onPresentCurrencyModal] = useModal(\n    <CurrencySearchModal\n      onCurrencySelect={handleCurrencySelect}\n      showCommonBases\n      selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\n    />,\n    true,\n    true,\n    'selectCurrencyModal',\n  )\n\n  return (\n    <Page>\n      <AppBody>\n        <AppHeader title={t('Import Pool')} subtitle={t('Import an existing pool')} backTo=\"/pool\" />\n        <AutoColumn style={{ padding: '1rem' }} gap=\"md\">\n          <StyledButton\n            endIcon={<ChevronDownIcon />}\n            onClick={() => {\n              onPresentCurrencyModal()\n              setActiveField(Fields.TOKEN0)\n            }}\n          >\n            {currency0 ? (\n              <Row>\n                <CurrencyLogo currency={currency0} />\n                <Text ml=\"8px\">{currency0.symbol}</Text>\n              </Row>\n            ) : (\n              <Text ml=\"8px\">{t('Select a Token')}</Text>\n            )}\n          </StyledButton>\n\n          <ColumnCenter>\n            <AddIcon />\n          </ColumnCenter>\n\n          <StyledButton\n            endIcon={<ChevronDownIcon />}\n            onClick={() => {\n              onPresentCurrencyModal()\n              setActiveField(Fields.TOKEN1)\n            }}\n          >\n            {currency1 ? (\n              <Row>\n                <CurrencyLogo currency={currency1} />\n                <Text ml=\"8px\">{currency1.symbol}</Text>\n              </Row>\n            ) : (\n              <Text as={Row}>{t('Select a Token')}</Text>\n            )}\n          </StyledButton>\n\n          {hasPosition && (\n            <ColumnCenter\n              style={{ justifyItems: 'center', backgroundColor: '', padding: '12px 0px', borderRadius: '12px' }}\n            >\n              <Text textAlign=\"center\">{t('Pool Found!')}</Text>\n              <StyledInternalLink to=\"/pool\">\n                <Text textAlign=\"center\">{t('Manage this pool.')}</Text>\n              </StyledInternalLink>\n            </ColumnCenter>\n          )}\n\n          {currency0 && currency1 ? (\n            pairState === PairState.EXISTS ? (\n              hasPosition && pair ? (\n                <MinimalPositionCard pair={pair} />\n              ) : (\n                <LightCard padding=\"45px 10px\">\n                  <AutoColumn gap=\"sm\" justify=\"center\">\n                    <Text textAlign=\"center\">{t('You donâ€™t have liquidity in this pool yet.')}</Text>\n                    <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\n                      <Text textAlign=\"center\">{t('Add Liquidity')}</Text>\n                    </StyledInternalLink>\n                  </AutoColumn>\n                </LightCard>\n              )\n            ) : validPairNoLiquidity ? (\n              <LightCard padding=\"45px 10px\">\n                <AutoColumn gap=\"sm\" justify=\"center\">\n                  <Text textAlign=\"center\">{t('No pool found.')}</Text>\n                  <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\n                    {t('Create pool.')}\n                  </StyledInternalLink>\n                </AutoColumn>\n              </LightCard>\n            ) : pairState === PairState.INVALID ? (\n              <LightCard padding=\"45px 10px\">\n                <AutoColumn gap=\"sm\" justify=\"center\">\n                  <Text textAlign=\"center\" fontWeight={500}>\n                    {t('Invalid pair.')}\n                  </Text>\n                </AutoColumn>\n              </LightCard>\n            ) : pairState === PairState.LOADING ? (\n              <LightCard padding=\"45px 10px\">\n                <AutoColumn gap=\"sm\" justify=\"center\">\n                  <Text textAlign=\"center\">\n                    {t('Loading')}\n                    <Dots />\n                  </Text>\n                </AutoColumn>\n              </LightCard>\n            ) : null\n          ) : (\n            prerequisiteMessage\n          )}\n        </AutoColumn>\n\n        {/* <CurrencySearchModal\n          isOpen={showSearch}\n          onCurrencySelect={handleCurrencySelect}\n          onDismiss={handleSearchDismiss}\n          showCommonBases\n          selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\n        /> */}\n      </AppBody>\n    </Page>\n  )\n}\n","import { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\n// An internal link from the react-router-dom library that is correctly styled\nconst StyledInternalLink = styled(Link)`\n  text-decoration: none;\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.primary};\n  font-weight: 500;\n\n  :hover {\n    text-decoration: underline;\n  }\n\n  :focus {\n    outline: none;\n    text-decoration: underline;\n  }\n\n  :active {\n    text-decoration: none;\n  }\n`\n\nexport default StyledInternalLink\n"],"sourceRoot":""}