{"version":3,"sources":["views/Pool/index.tsx"],"names":["Body","styled","CardBody","theme","colors","dropdownDeep","Pool","account","useActiveWeb3React","t","useTranslation","trackedTokenPairs","useTrackedTokenPairs","tokenPairsWithLiquidityTokens","useMemo","map","tokens","liquidityToken","toV2LiquidityToken","liquidityTokens","tpwlt","useTokenBalancesWithLoadingIndicator","undefined","v2PairsBalances","fetchingV2PairBalances","liquidityTokensWithBalances","filter","address","greaterThan","v2Pairs","usePairs","v2IsLoading","length","some","V2Pair","allV2PairsWithLiquidity","v2Pair","Boolean","title","subtitle","color","textAlign","index","pair","mb","flexDirection","alignItems","mt","id","variant","scale","as","Link","to","style","width","startIcon"],"mappings":"qTAeMA,EAAOC,YAAOC,IAAPD,CAAgB,sDACP,YAAQ,SAALE,MAAkBC,OAAOC,gBAGnC,SAASC,IACtB,IAAQC,EAAYC,cAAZD,QACAE,EAAMC,cAAND,EAGFE,EAAoBC,cACpBC,EAAgCC,mBACpC,kBAAMH,EAAkBI,KAAI,SAACC,GAAM,MAAM,CAAEC,eAAgBC,YAAmBF,GAASA,eACvF,CAACL,IAEGQ,EAAkBL,mBACtB,kBAAMD,EAA8BE,KAAI,SAACK,GAAK,OAAKA,EAAMH,oBACzD,CAACJ,IAEH,EAAkDQ,YACzC,OAAPd,QAAO,IAAPA,SAAWe,EACXH,GACD,mBAHMI,EAAe,KAAEC,EAAsB,KAMxCC,EAA8BX,mBAClC,kBACED,EAA8Ba,QAAO,kBAAGT,EAAc,EAAdA,eAAc,OACb,QADa,EACpDM,EAAgBN,EAAeU,gBAAQ,aAAvC,EAAyCC,YAAY,UAEzD,CAACf,EAA+BU,IAG5BM,EAAUC,YAASL,EAA4BV,KAAI,YAAS,SAANC,WACtDe,EACJP,IAAiC,OAAPK,QAAO,IAAPA,OAAO,EAAPA,EAASG,QAASP,EAA4BO,SAAiB,OAAPH,QAAO,IAAPA,OAAO,EAAPA,EAASI,MAAK,SAACC,GAAM,OAAMA,MAEzGC,EAA0BN,EAAQd,KAAI,YAAQ,OAAR,iBAAQ,MAAYW,QAAO,SAACU,GAAM,OAAqBC,QAAQD,MAiC3G,OACE,cAAC,IAAI,UACH,eAAC,IAAO,WACN,cAAC,IAAS,CAACE,MAAM,iBAAiBC,SAAS,4CAC3C,eAACvC,EAAI,WAlCJO,EAODwB,EAEA,cAAC,KAAI,CAACS,MAAM,aAAaC,UAAU,SAAQ,SACzC,cAAC,IAAI,yBAIgB,OAAvBN,QAAuB,IAAvBA,OAAuB,EAAvBA,EAAyBH,QAAS,EAC7BG,EAAwBpB,KAAI,SAACqB,EAAQM,GAAK,OAC/C,cAAC,IAAgB,CAEfC,KAAMP,EACNQ,GAAIF,EAAQP,EAAwBH,OAAS,EAAI,OAAS,GAFrDI,EAAOnB,eAAeU,YAO/B,cAAC,KAAI,CAACa,MAAM,aAAaC,UAAU,SAAQ,SACxChC,EAAE,yBAvBH,cAAC,KAAI,CAAC+B,MAAM,aAAaC,UAAU,SAAQ,SACxChC,EAAE,iDAiCFF,IAAYwB,GACX,eAAC,IAAI,CAACc,cAAc,SAASC,WAAW,SAASC,GAAG,OAAM,UACxD,cAAC,KAAI,CAACP,MAAM,aAAaI,GAAG,MAAK,SAC9BnC,EAAE,kCAEL,cAAC,IAAM,CAACuC,GAAG,mBAAmBC,QAAQ,YAAYC,MAAM,KAAKC,GAAIC,IAAMC,GAAG,QAAO,SAC9E5C,EAAE,gCAKX,cAAC,IAAU,CAAC6C,MAAO,CAAEb,UAAW,UAAW,SACzC,cAAC,IAAM,CAACO,GAAG,mBAAmBG,GAAIC,IAAMC,GAAG,OAAOE,MAAM,OAAOC,UAAW,cAAC,IAAO,CAAChB,MAAM,UAAW,SACjG/B,EAAE","file":"static/js/26.95dc616b.chunk.js","sourcesContent":["import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Pair } from '@pancakeswap/sdk'\nimport { Text, Flex, CardBody, CardFooter, Button, AddIcon } from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport FullPositionCard from '../../components/PositionCard'\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/wallet/hooks'\nimport { usePairs } from '../../hooks/usePairs'\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks'\nimport Dots from '../../components/Loader/Dots'\nimport { AppHeader, AppBody } from '../../components/App'\nimport Page from '../Page'\n\nconst Body = styled(CardBody)`\n  background-color: ${({ theme }) => theme.colors.dropdownDeep};\n`\n\nexport default function Pool() {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  // fetch the user's balances of all tracked V2 LP tokens\n  const trackedTokenPairs = useTrackedTokenPairs()\n  const tokenPairsWithLiquidityTokens = useMemo(\n    () => trackedTokenPairs.map((tokens) => ({ liquidityToken: toV2LiquidityToken(tokens), tokens })),\n    [trackedTokenPairs],\n  )\n  const liquidityTokens = useMemo(\n    () => tokenPairsWithLiquidityTokens.map((tpwlt) => tpwlt.liquidityToken),\n    [tokenPairsWithLiquidityTokens],\n  )\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\n    account ?? undefined,\n    liquidityTokens,\n  )\n\n  // fetch the reserves for all V2 pools in which the user has a balance\n  const liquidityTokensWithBalances = useMemo(\n    () =>\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0'),\n      ),\n    [tokenPairsWithLiquidityTokens, v2PairsBalances],\n  )\n\n  const v2Pairs = usePairs(liquidityTokensWithBalances.map(({ tokens }) => tokens))\n  const v2IsLoading =\n    fetchingV2PairBalances || v2Pairs?.length < liquidityTokensWithBalances.length || v2Pairs?.some((V2Pair) => !V2Pair)\n\n  const allV2PairsWithLiquidity = v2Pairs.map(([, pair]) => pair).filter((v2Pair): v2Pair is Pair => Boolean(v2Pair))\n\n  const renderBody = () => {\n    if (!account) {\n      return (\n        <Text color=\"textSubtle\" textAlign=\"center\">\n          {t('Connect to a wallet to view your liquidity.')}\n        </Text>\n      )\n    }\n    if (v2IsLoading) {\n      return (\n        <Text color=\"textSubtle\" textAlign=\"center\">\n          <Dots>Loading</Dots>\n        </Text>\n      )\n    }\n    if (allV2PairsWithLiquidity?.length > 0) {\n      return allV2PairsWithLiquidity.map((v2Pair, index) => (\n        <FullPositionCard\n          key={v2Pair.liquidityToken.address}\n          pair={v2Pair}\n          mb={index < allV2PairsWithLiquidity.length - 1 ? '16px' : 0}\n        />\n      ))\n    }\n    return (\n      <Text color=\"textSubtle\" textAlign=\"center\">\n        {t('No liquidity found.')}\n      </Text>\n    )\n  }\n\n  return (\n    <Page>\n      <AppBody>\n        <AppHeader title=\"Your Liquidity\" subtitle=\"Remove liquidity to receive tokens back\" />\n        <Body>\n          {renderBody()}\n          {account && !v2IsLoading && (\n            <Flex flexDirection=\"column\" alignItems=\"center\" mt=\"24px\">\n              <Text color=\"textSubtle\" mb=\"8px\">\n                {t(\"Don't see a pool you joined?\")}\n              </Text>\n              <Button id=\"import-pool-link\" variant=\"secondary\" scale=\"sm\" as={Link} to=\"/find\">\n                {t('Find other LP tokens')}\n              </Button>\n            </Flex>\n          )}\n        </Body>\n        <CardFooter style={{ textAlign: 'center' }}>\n          <Button id=\"join-pool-button\" as={Link} to=\"/add\" width=\"100%\" startIcon={<AddIcon color=\"white\" />}>\n            {t('Add Liquidity')}\n          </Button>\n        </CardFooter>\n      </AppBody>\n    </Page>\n  )\n}\n"],"sourceRoot":""}